{"version":3,"sources":["cropper.js","image.js"],"names":["factory","define","amd","exports","require","jQuery","$","isNumber","n","isNaN","isUndefined","toArray","obj","offset","args","push","slice","apply","proxy","fn","context","arguments","concat","isCrossOriginURL","url","parts","match","location","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","indexOf","getCrossOrigin","crossOrigin","getImageSize","image","callback","newImage","naturalWidth","naturalHeight","document","createElement","onload","this","width","height","src","getTransform","options","transforms","rotate","scaleX","scaleY","length","join","getRotatedSizes","data","isReversed","newWidth","newHeight","deg","abs","degree","arc","Math","PI","sinArc","sin","cosArc","cos","aspectRatio","getSourceCanvas","translateX","translateY","rotated","canvas","getContext","x","y","scalable","rotatable","advanced","canvasWidth","canvasHeight","save","translate","scale","drawImage","restore","Cropper","element","$element","extend","DEFAULTS","isPlainObject","isLoaded","isBuilt","isCompleted","isRotated","isCropped","isDisabled","isReplaced","isLimited","isImg","originalUrl","cropBox","init","$window","window","$document","NAMESPACE","CLASS_MODAL","CLASS_HIDE","CLASS_HIDDEN","CLASS_INVISIBLE","CLASS_MOVE","CLASS_CROP","CLASS_DISABLED","CLASS_BG","EVENT_MOUSE_DOWN","EVENT_MOUSE_MOVE","EVENT_MOUSE_UP","EVENT_WHEEL","EVENT_DBLCLICK","EVENT_LOAD","EVENT_ERROR","EVENT_RESIZE","EVENT_BUILD","EVENT_BUILT","EVENT_CROP_START","EVENT_CROP_MOVE","EVENT_CROP_END","EVENT_CROP","EVENT_ZOOM","REGEXP_ACTIONS","DATA_PREVIEW","DATA_ACTION","ACTION_EAST","ACTION_WEST","ACTION_SOUTH","ACTION_NORTH","ACTION_SOUTH_EAST","ACTION_SOUTH_WEST","ACTION_NORTH_EAST","ACTION_NORTH_WEST","ACTION_ALL","ACTION_CROP","ACTION_MOVE","ACTION_ZOOM","ACTION_NONE","SUPPORT_CANVAS","isFunction","num","Number","min","max","sqrt","round","prototype","version","$this","is","attr","prop","toDataURL","load","trigger","type","e","Event","bustCacheUrl","$clone","one","build","isDefaultPrevented","checkCrossOrigin","complete","start","stop","addClass","insertAfter","$image","off","remove","$cropper","$cropBox","$face","unbuild","$container","parent","TEMPLATE","$canvas","find","append","$dragBox","$viewBox","after","removeClass","initPreview","bind","NaN","viewMode","autoCrop","modal","guides","center","cropBoxMovable","highlight","background","cropBoxResizable","setDragMode","dragMode","render","setData","built","setTimeout","initialImage","initialCanvas","initialCropBox","container","unbind","resetPreview","$preview","initContainer","initCanvas","initCropBox","renderCanvas","renderCropBox","css","minContainerWidth","minContainerHeight","containerWidth","containerHeight","oldLeft","left","oldTop","top","limitCanvas","isSizeLimited","isPositionLimited","minCanvasWidth","minCanvasHeight","newCanvasLeft","newCanvasTop","minWidth","minHeight","maxWidth","Infinity","maxHeight","minLeft","minTop","maxLeft","maxTop","isChanged","renderImage","limitCropBox","output","reversed","marginLeft","marginTop","transform","autoCropArea","minCropBoxWidth","minCropBoxHeight","maxCropBoxWidth","maxCropBoxHeight","movable","preview","getData","html","each","removeData","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","ratio","cropstart","on","cropmove","cropend","crop","zoom","cropStart","zoomable","zoomOnWheel","wheel","toggleDragModeOnDblclick","dblclick","_cropMove","cropMove","_cropEnd","cropEnd","responsive","_resize","resize","canvasData","cropBoxData","getCanvasData","getCropBoxData","setCanvasData","i","setCropBoxData","hasClass","event","originalEvent","wheelZoomRatio","delta","preventDefault","deltaY","wheelDelta","detail","touchesLength","action","touches","zoomOnTouch","startX2","pageX","startY2","pageY","target","test","cropping","startX","startY","endX2","endY2","endX","endY","change","shiftKey","toggleClass","range","right","bottom","renderable","limited","X","Y","move","x1","y1","x2","y2","z1","z2","reset","clear","replace","enable","disable","destroy","offsetX","offsetY","moveTo","_originalEvent","zoomTo","oldRatio","rotateTo","isRounded","isScaled","call","getContainerData","getImageData","isWidthChanged","isHeightChanged","getCroppedCanvas","scaledWidth","scaledHeight","scaledRatio","fillColor","fillStyle","fillRect","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","source","sourceWidth","sourceHeight","srcX","srcY","setAspectRatio","mode","croppable","setDefaults","other","cropper","result","Constructor","noConflict","ImageEditor","el","form","actionInput","_init","cropButton","rotateLeftButton","rotateRightButton","flipHorizontalButton","flipVerticalButton","_initEvents","self","_rotateLeft","_rotateRight","_flipHorizontal","_flipVertical","_initCropper","_cropEnabled","stopPropagation","_crop","val","floor","_submit","submit"],"mappings":"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","file":"image.js","sourcesContent":["/*!\n * Cropper v2.0.1\n * https://github.com/fengyuanchen/cropper\n *\n * Copyright (c) 2014-2015 Fengyuan Chen and contributors\n * Released under the MIT license\n *\n * Date: 2015-11-18T03:13:47.241Z\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node / CommonJS\n    factory(require('jquery'));\n  } else {\n    // Browser globals.\n    factory(jQuery);\n  }\n})(function ($) {\n\n  'use strict';\n\n  // Globals\n  var $window = $(window);\n  var $document = $(document);\n  var location = window.location;\n\n  // Constants\n  var NAMESPACE = 'cropper';\n\n  // Classes\n  var CLASS_MODAL = 'cropper-modal';\n  var CLASS_HIDE = 'cropper-hide';\n  var CLASS_HIDDEN = 'cropper-hidden';\n  var CLASS_INVISIBLE = 'cropper-invisible';\n  var CLASS_MOVE = 'cropper-move';\n  var CLASS_CROP = 'cropper-crop';\n  var CLASS_DISABLED = 'cropper-disabled';\n  var CLASS_BG = 'cropper-bg';\n\n  // Events\n  var EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown';\n  var EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove';\n  var EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_LOAD = 'load.' + NAMESPACE;\n  var EVENT_ERROR = 'error.' + NAMESPACE;\n  var EVENT_RESIZE = 'resize.' + NAMESPACE; // Bind to window with namespace\n  var EVENT_BUILD = 'build.' + NAMESPACE;\n  var EVENT_BUILT = 'built.' + NAMESPACE;\n  var EVENT_CROP_START = 'cropstart.' + NAMESPACE;\n  var EVENT_CROP_MOVE = 'cropmove.' + NAMESPACE;\n  var EVENT_CROP_END = 'cropend.' + NAMESPACE;\n  var EVENT_CROP = 'crop.' + NAMESPACE;\n  var EVENT_ZOOM = 'zoom.' + NAMESPACE;\n\n  // RegExps\n  var REGEXP_ACTIONS = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;\n\n  // Data keys\n  var DATA_PREVIEW = 'preview';\n  var DATA_ACTION = 'action';\n\n  // Actions\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_NONE = 'none';\n\n  // Supports\n  var SUPPORT_CANVAS = $.isFunction($('<canvas>')[0].getContext);\n\n  // Maths\n  var num = Number;\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n  var sin = Math.sin;\n  var cos = Math.cos;\n  var sqrt = Math.sqrt;\n  var round = Math.round;\n\n  // Prototype\n  var prototype = {\n    version: '2.0.1'\n  };\n\n  function isNumber(n) {\n    return typeof n === 'number' && !isNaN(n);\n  }\n\n  function isUndefined(n) {\n    return typeof n === 'undefined';\n  }\n\n  function toArray(obj, offset) {\n    var args = [];\n\n    // This is necessary for IE8\n    if (isNumber(offset)) {\n      args.push(offset);\n    }\n\n    return args.slice.apply(obj, args);\n  }\n\n  // Custom proxy to avoid jQuery's guid\n  function proxy(fn, context) {\n    var args = toArray(arguments, 2);\n\n    return function () {\n      return fn.apply(context, args.concat(toArray(arguments)));\n    };\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(/^(https?:)\\/\\/([^\\:\\/\\?#]+):?(\\d*)/i);\n\n    return parts && (\n      parts[1] !== location.protocol ||\n      parts[2] !== location.hostname ||\n      parts[3] !== location.port\n    );\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + (new Date()).getTime();\n\n    return (url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp);\n  }\n\n  function getCrossOrigin(crossOrigin) {\n    return crossOrigin ? ' crossOrigin=\"' + crossOrigin + '\"' : '';\n  }\n\n  function getImageSize(image, callback) {\n    var newImage;\n\n    // Modern browsers\n    if (image.naturalWidth) {\n      return callback(image.naturalWidth, image.naturalHeight);\n    }\n\n    // IE8: Don't use `new Image()` here (#319)\n    newImage = document.createElement('img');\n\n    newImage.onload = function () {\n      callback(this.width, this.height);\n    };\n\n    newImage.src = image.src;\n  }\n\n  function getTransform(options) {\n    var transforms = [];\n    var rotate = options.rotate;\n    var scaleX = options.scaleX;\n    var scaleY = options.scaleY;\n\n    if (isNumber(rotate)) {\n      transforms.push('rotate(' + rotate + 'deg)');\n    }\n\n    if (isNumber(scaleX) && isNumber(scaleY)) {\n      transforms.push('scale(' + scaleX + ',' + scaleY + ')');\n    }\n\n    return transforms.length ? transforms.join(' ') : 'none';\n  }\n\n  function getRotatedSizes(data, isReversed) {\n    var deg = abs(data.degree) % 180;\n    var arc = (deg > 90 ? (180 - deg) : deg) * Math.PI / 180;\n    var sinArc = sin(arc);\n    var cosArc = cos(arc);\n    var width = data.width;\n    var height = data.height;\n    var aspectRatio = data.aspectRatio;\n    var newWidth;\n    var newHeight;\n\n    if (!isReversed) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data) {\n    var canvas = $('<canvas>')[0];\n    var context = canvas.getContext('2d');\n    var x = 0;\n    var y = 0;\n    var width = data.naturalWidth;\n    var height = data.naturalHeight;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n    var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n    var rotatable = isNumber(rotate) && rotate !== 0;\n    var advanced = rotatable || scalable;\n    var canvasWidth = width;\n    var canvasHeight = height;\n    var translateX;\n    var translateY;\n    var rotated;\n\n    if (scalable) {\n      translateX = width / 2;\n      translateY = height / 2;\n    }\n\n    if (rotatable) {\n      rotated = getRotatedSizes({\n        width: width,\n        height: height,\n        degree: rotate\n      });\n\n      canvasWidth = rotated.width;\n      canvasHeight = rotated.height;\n      translateX = rotated.width / 2;\n      translateY = rotated.height / 2;\n    }\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (advanced) {\n      x = -width / 2;\n      y = -height / 2;\n\n      context.save();\n      context.translate(translateX, translateY);\n    }\n\n    if (rotatable) {\n      context.rotate(rotate * Math.PI / 180);\n    }\n\n    // Should call `scale` after rotated\n    if (scalable) {\n      context.scale(scaleX, scaleY);\n    }\n\n    context.drawImage(image, x, y, width, height);\n\n    if (advanced) {\n      context.restore();\n    }\n\n    return canvas;\n  }\n\n  function Cropper(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Cropper.DEFAULTS, $.isPlainObject(options) && options);\n    this.isLoaded = false;\n    this.isBuilt = false;\n    this.isCompleted = false;\n    this.isRotated = false;\n    this.isCropped = false;\n    this.isDisabled = false;\n    this.isReplaced = false;\n    this.isLimited = false;\n    this.isImg = false;\n    this.originalUrl = '';\n    this.crossOrigin = '';\n    this.canvas = null;\n    this.cropBox = null;\n    this.init();\n  }\n\n  $.extend(prototype, {\n    init: function () {\n      var $this = this.$element;\n      var url;\n\n      if ($this.is('img')) {\n        this.isImg = true;\n\n        // Should use `$.fn.attr` here. e.g.: \"img/picture.jpg\"\n        this.originalUrl = url = $this.attr('src');\n\n        // Stop when it's a blank image\n        if (!url) {\n          return;\n        }\n\n        // Should use `$.fn.prop` here. e.g.: \"http://example.com/img/picture.jpg\"\n        url = $this.prop('src');\n      } else if ($this.is('canvas') && SUPPORT_CANVAS) {\n        url = $this[0].toDataURL();\n      }\n\n      this.load(url);\n    },\n\n    // A shortcut for triggering custom events\n    trigger: function (type, data) {\n      var e = $.Event(type, data);\n\n      this.$element.trigger(e);\n\n      return e;\n    },\n\n    load: function (url) {\n      var options = this.options;\n      var $this = this.$element;\n      var crossOrigin = '';\n      var bustCacheUrl;\n      var $clone;\n\n      if (!url) {\n        return;\n      }\n\n      this.url = url;\n\n      // Trigger build event first\n      $this.one(EVENT_BUILD, options.build);\n\n      if (this.trigger(EVENT_BUILD).isDefaultPrevented()) {\n        return;\n      }\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url)) {\n        crossOrigin = $this.prop('crossOrigin');\n\n        // Bust cache (#148), only when there was not a \"crossOrigin\" property\n        if (!crossOrigin) {\n          crossOrigin = 'anonymous';\n          bustCacheUrl = addTimestamp(url);\n        }\n      }\n\n      this.crossOrigin = crossOrigin;\n      this.$clone = $clone = $('<img' + getCrossOrigin(crossOrigin) + ' src=\"' + (bustCacheUrl || url) + '\">');\n\n      if (this.isImg) {\n        if ($this[0].complete) {\n          this.start();\n        } else {\n          $this.one(EVENT_LOAD, $.proxy(this.start, this));\n        }\n      } else {\n        $clone.\n          one(EVENT_LOAD, $.proxy(this.start, this)).\n          one(EVENT_ERROR, $.proxy(this.stop, this)).\n          addClass(CLASS_HIDE).\n          insertAfter($this);\n      }\n    },\n\n    start: function () {\n      var $image = this.$element;\n      var $clone = this.$clone;\n\n      if (!this.isImg) {\n        $clone.off(EVENT_ERROR, this.stop);\n        $image = $clone;\n      }\n\n      getImageSize($image[0], $.proxy(function (naturalWidth, naturalHeight) {\n        this.image = {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        };\n\n        this.isLoaded = true;\n        this.build();\n      }, this));\n    },\n\n    stop: function () {\n      this.$clone.remove();\n      this.$clone = null;\n    }\n  });\n\n  $.extend(prototype, {\n    build: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $clone = this.$clone;\n      var $cropper;\n      var $cropBox;\n      var $face;\n\n      if (!this.isLoaded) {\n        return;\n      }\n\n      // Unbuild first when replace\n      if (this.isBuilt) {\n        this.unbuild();\n      }\n\n      // Create cropper elements\n      this.$container = $this.parent();\n      this.$cropper = $cropper = $(Cropper.TEMPLATE);\n      this.$canvas = $cropper.find('.cropper-canvas').append($clone);\n      this.$dragBox = $cropper.find('.cropper-drag-box');\n      this.$cropBox = $cropBox = $cropper.find('.cropper-crop-box');\n      this.$viewBox = $cropper.find('.cropper-view-box');\n      this.$face = $face = $cropBox.find('.cropper-face');\n\n      // Hide the original image\n      $this.addClass(CLASS_HIDDEN).after($cropper);\n\n      // Show the clone image if is hidden\n      if (!this.isImg) {\n        $clone.removeClass(CLASS_HIDE);\n      }\n\n      this.initPreview();\n      this.bind();\n\n      options.aspectRatio = max(0, options.aspectRatio) || NaN;\n      options.viewMode = max(0, min(3, round(options.viewMode))) || 0;\n\n      if (options.autoCrop) {\n        this.isCropped = true;\n\n        if (options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      } else {\n        $cropBox.addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.guides) {\n        $cropBox.find('.cropper-dashed').addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        $cropBox.find('.cropper-center').addClass(CLASS_HIDDEN);\n      }\n\n      if (options.cropBoxMovable) {\n        $face.addClass(CLASS_MOVE).data(DATA_ACTION, ACTION_ALL);\n      }\n\n      if (!options.highlight) {\n        $face.addClass(CLASS_INVISIBLE);\n      }\n\n      if (options.background) {\n        $cropper.addClass(CLASS_BG);\n      }\n\n      if (!options.cropBoxResizable) {\n        $cropBox.find('.cropper-line, .cropper-point').addClass(CLASS_HIDDEN);\n      }\n\n      this.setDragMode(options.dragMode);\n      this.render();\n      this.isBuilt = true;\n      this.setData(options.data);\n      $this.one(EVENT_BUILT, options.built);\n\n      // Trigger the built event asynchronously to keep `data('cropper')` is defined\n      setTimeout($.proxy(function () {\n        this.trigger(EVENT_BUILT);\n        this.isCompleted = true;\n      }, this), 0);\n    },\n\n    unbuild: function () {\n      if (!this.isBuilt) {\n        return;\n      }\n\n      this.isBuilt = false;\n      this.initialImage = null;\n\n      // Clear `initialCanvas` is necessary when replace\n      this.initialCanvas = null;\n      this.initialCropBox = null;\n      this.container = null;\n      this.canvas = null;\n\n      // Clear `cropBox` is necessary when replace\n      this.cropBox = null;\n      this.unbind();\n\n      this.resetPreview();\n      this.$preview = null;\n\n      this.$viewBox = null;\n      this.$cropBox = null;\n      this.$dragBox = null;\n      this.$canvas = null;\n      this.$container = null;\n\n      this.$cropper.remove();\n      this.$cropper = null;\n    }\n  });\n\n  $.extend(prototype, {\n    render: function () {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    initContainer: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $container = this.$container;\n      var $cropper = this.$cropper;\n\n      $cropper.addClass(CLASS_HIDDEN);\n      $this.removeClass(CLASS_HIDDEN);\n\n      $cropper.css((this.container = {\n        width: max($container.width(), num(options.minContainerWidth) || 200),\n        height: max($container.height(), num(options.minContainerHeight) || 100)\n      }));\n\n      $this.addClass(CLASS_HIDDEN);\n      $cropper.removeClass(CLASS_HIDDEN);\n    },\n\n    // Canvas (image wrapper)\n    initCanvas: function () {\n      var viewMode = this.options.viewMode;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var image = this.image;\n      var aspectRatio = image.aspectRatio;\n      var canvas = {\n            naturalWidth: image.naturalWidth,\n            naturalHeight: image.naturalHeight,\n            aspectRatio: aspectRatio,\n            width: containerWidth,\n            height: containerHeight\n          };\n\n      if (containerHeight * aspectRatio > containerWidth) {\n        if (viewMode === 3) {\n          canvas.width = containerHeight * aspectRatio;\n        } else {\n          canvas.height = containerWidth / aspectRatio;\n        }\n      } else {\n        if (viewMode === 3) {\n          canvas.height = containerWidth / aspectRatio;\n        } else {\n          canvas.width = containerHeight * aspectRatio;\n        }\n      }\n\n      canvas.oldLeft = canvas.left = (containerWidth - canvas.width) / 2;\n      canvas.oldTop = canvas.top = (containerHeight - canvas.height) / 2;\n\n      this.canvas = canvas;\n      this.isLimited = (viewMode === 1 || viewMode === 2);\n      this.limitCanvas(true, true);\n      this.initialImage = $.extend({}, image);\n      this.initialCanvas = $.extend({}, canvas);\n    },\n\n    limitCanvas: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var viewMode = options.viewMode;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n      var cropBox = this.cropBox;\n      var isCropped = this.isCropped && cropBox;\n      var minCanvasWidth;\n      var minCanvasHeight;\n      var newCanvasLeft;\n      var newCanvasTop;\n\n      if (isSizeLimited) {\n        minCanvasWidth = num(options.minCanvasWidth) || 0;\n        minCanvasHeight = num(options.minCanvasHeight) || 0;\n\n        if (viewMode) {\n          if (viewMode > 1) {\n            minCanvasWidth = max(minCanvasWidth, containerWidth);\n            minCanvasHeight = max(minCanvasHeight, containerHeight);\n\n            if (viewMode === 3) {\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          } else {\n            if (minCanvasWidth) {\n              minCanvasWidth = max(minCanvasWidth, isCropped ? cropBox.width : 0);\n            } else if (minCanvasHeight) {\n              minCanvasHeight = max(minCanvasHeight, isCropped ? cropBox.height : 0);\n            } else if (isCropped) {\n              minCanvasWidth = cropBox.width;\n              minCanvasHeight = cropBox.height;\n\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          }\n        }\n\n        if (minCanvasWidth && minCanvasHeight) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          } else {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          }\n        } else if (minCanvasWidth) {\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        }\n\n        canvas.minWidth = minCanvasWidth;\n        canvas.minHeight = minCanvasHeight;\n        canvas.maxWidth = Infinity;\n        canvas.maxHeight = Infinity;\n      }\n\n      if (isPositionLimited) {\n        if (viewMode) {\n          newCanvasLeft = containerWidth - canvas.width;\n          newCanvasTop = containerHeight - canvas.height;\n\n          canvas.minLeft = min(0, newCanvasLeft);\n          canvas.minTop = min(0, newCanvasTop);\n          canvas.maxLeft = max(0, newCanvasLeft);\n          canvas.maxTop = max(0, newCanvasTop);\n\n          if (isCropped && this.isLimited) {\n            canvas.minLeft = min(\n              cropBox.left,\n              cropBox.left + cropBox.width - canvas.width\n            );\n            canvas.minTop = min(\n              cropBox.top,\n              cropBox.top + cropBox.height - canvas.height\n            );\n            canvas.maxLeft = cropBox.left;\n            canvas.maxTop = cropBox.top;\n\n            if (viewMode === 2) {\n              if (canvas.width >= containerWidth) {\n                canvas.minLeft = min(0, newCanvasLeft);\n                canvas.maxLeft = max(0, newCanvasLeft);\n              }\n\n              if (canvas.height >= containerHeight) {\n                canvas.minTop = min(0, newCanvasTop);\n                canvas.maxTop = max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvas.minLeft = -canvas.width;\n          canvas.minTop = -canvas.height;\n          canvas.maxLeft = containerWidth;\n          canvas.maxTop = containerHeight;\n        }\n      }\n    },\n\n    renderCanvas: function (isChanged) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var rotate = image.rotate;\n      var naturalWidth = image.naturalWidth;\n      var naturalHeight = image.naturalHeight;\n      var aspectRatio;\n      var rotated;\n\n      if (this.isRotated) {\n        this.isRotated = false;\n\n        // Computes rotated sizes with image sizes\n        rotated = getRotatedSizes({\n          width: image.width,\n          height: image.height,\n          degree: rotate\n        });\n\n        aspectRatio = rotated.width / rotated.height;\n\n        if (aspectRatio !== canvas.aspectRatio) {\n          canvas.left -= (rotated.width - canvas.width) / 2;\n          canvas.top -= (rotated.height - canvas.height) / 2;\n          canvas.width = rotated.width;\n          canvas.height = rotated.height;\n          canvas.aspectRatio = aspectRatio;\n          canvas.naturalWidth = naturalWidth;\n          canvas.naturalHeight = naturalHeight;\n\n          // Computes rotated sizes with natural image sizes\n          if (rotate % 180) {\n            rotated = getRotatedSizes({\n              width: naturalWidth,\n              height: naturalHeight,\n              degree: rotate\n            });\n\n            canvas.naturalWidth = rotated.width;\n            canvas.naturalHeight = rotated.height;\n          }\n\n          this.limitCanvas(true, false);\n        }\n      }\n\n      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {\n        canvas.left = canvas.oldLeft;\n      }\n\n      if (canvas.height > canvas.maxHeight || canvas.height < canvas.minHeight) {\n        canvas.top = canvas.oldTop;\n      }\n\n      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);\n      canvas.height = min(max(canvas.height, canvas.minHeight), canvas.maxHeight);\n\n      this.limitCanvas(false, true);\n\n      canvas.oldLeft = canvas.left = min(max(canvas.left, canvas.minLeft), canvas.maxLeft);\n      canvas.oldTop = canvas.top = min(max(canvas.top, canvas.minTop), canvas.maxTop);\n\n      this.$canvas.css({\n        width: canvas.width,\n        height: canvas.height,\n        left: canvas.left,\n        top: canvas.top\n      });\n\n      this.renderImage();\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCropBox(true, true);\n      }\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    renderImage: function (isChanged) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var reversed;\n\n      if (image.rotate) {\n        reversed = getRotatedSizes({\n          width: canvas.width,\n          height: canvas.height,\n          degree: image.rotate,\n          aspectRatio: image.aspectRatio\n        }, true);\n      }\n\n      $.extend(image, reversed ? {\n        width: reversed.width,\n        height: reversed.height,\n        left: (canvas.width - reversed.width) / 2,\n        top: (canvas.height - reversed.height) / 2\n      } : {\n        width: canvas.width,\n        height: canvas.height,\n        left: 0,\n        top: 0\n      });\n\n      this.$clone.css({\n        width: image.width,\n        height: image.height,\n        marginLeft: image.left,\n        marginTop: image.top,\n        transform: getTransform(image)\n      });\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    initCropBox: function () {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.aspectRatio;\n      var autoCropArea = num(options.autoCropArea) || 0.8;\n      var cropBox = {\n            width: canvas.width,\n            height: canvas.height\n          };\n\n      if (aspectRatio) {\n        if (canvas.height * aspectRatio > canvas.width) {\n          cropBox.height = cropBox.width / aspectRatio;\n        } else {\n          cropBox.width = cropBox.height * aspectRatio;\n        }\n      }\n\n      this.cropBox = cropBox;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      // The width of auto crop area must large than \"minWidth\", and the height too. (#164)\n      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);\n      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);\n      cropBox.oldLeft = cropBox.left = canvas.left + (canvas.width - cropBox.width) / 2;\n      cropBox.oldTop = cropBox.top = canvas.top + (canvas.height - cropBox.height) / 2;\n\n      this.initialCropBox = $.extend({}, cropBox);\n    },\n\n    limitCropBox: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var isLimited = this.isLimited;\n      var minCropBoxWidth;\n      var minCropBoxHeight;\n      var maxCropBoxWidth;\n      var maxCropBoxHeight;\n\n      if (isSizeLimited) {\n        minCropBoxWidth = num(options.minCropBoxWidth) || 0;\n        minCropBoxHeight = num(options.minCropBoxHeight) || 0;\n\n        // The min/maxCropBoxWidth/Height must be less than containerWidth/Height\n        minCropBoxWidth = min(minCropBoxWidth, containerWidth);\n        minCropBoxHeight = min(minCropBoxHeight, containerHeight);\n        maxCropBoxWidth = min(containerWidth, isLimited ? canvas.width : containerWidth);\n        maxCropBoxHeight = min(containerHeight, isLimited ? canvas.height : containerHeight);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        }\n\n        // The minWidth/Height must be less than maxWidth/Height\n        cropBox.minWidth = min(minCropBoxWidth, maxCropBoxWidth);\n        cropBox.minHeight = min(minCropBoxHeight, maxCropBoxHeight);\n        cropBox.maxWidth = maxCropBoxWidth;\n        cropBox.maxHeight = maxCropBoxHeight;\n      }\n\n      if (isPositionLimited) {\n        if (isLimited) {\n          cropBox.minLeft = max(0, canvas.left);\n          cropBox.minTop = max(0, canvas.top);\n          cropBox.maxLeft = min(containerWidth, canvas.left + canvas.width) - cropBox.width;\n          cropBox.maxTop = min(containerHeight, canvas.top + canvas.height) - cropBox.height;\n        } else {\n          cropBox.minLeft = 0;\n          cropBox.minTop = 0;\n          cropBox.maxLeft = containerWidth - cropBox.width;\n          cropBox.maxTop = containerHeight - cropBox.height;\n        }\n      }\n    },\n\n    renderCropBox: function () {\n      var options = this.options;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var cropBox = this.cropBox;\n\n      if (cropBox.width > cropBox.maxWidth || cropBox.width < cropBox.minWidth) {\n        cropBox.left = cropBox.oldLeft;\n      }\n\n      if (cropBox.height > cropBox.maxHeight || cropBox.height < cropBox.minHeight) {\n        cropBox.top = cropBox.oldTop;\n      }\n\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      this.limitCropBox(false, true);\n\n      cropBox.oldLeft = cropBox.left = min(max(cropBox.left, cropBox.minLeft), cropBox.maxLeft);\n      cropBox.oldTop = cropBox.top = min(max(cropBox.top, cropBox.minTop), cropBox.maxTop);\n\n      if (options.movable && options.cropBoxMovable) {\n\n        // Turn to move the canvas when the crop box is equal to the container\n        this.$face.data(DATA_ACTION, (cropBox.width === containerWidth && cropBox.height === containerHeight) ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      this.$cropBox.css({\n        width: cropBox.width,\n        height: cropBox.height,\n        left: cropBox.left,\n        top: cropBox.top\n      });\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.isDisabled) {\n        this.output();\n      }\n    },\n\n    output: function () {\n      this.preview();\n\n      if (this.isCompleted) {\n        this.trigger(EVENT_CROP, this.getData());\n      } else if (!this.isBuilt) {\n\n        // Only trigger one crop event before complete\n        this.$element.one(EVENT_BUILT, $.proxy(function () {\n          this.trigger(EVENT_CROP, this.getData());\n        }, this));\n      }\n    }\n  });\n\n  $.extend(prototype, {\n    initPreview: function () {\n      var crossOrigin = getCrossOrigin(this.crossOrigin);\n      var url = this.url;\n\n      this.$preview = $(this.options.preview);\n      this.$viewBox.html('<img' + crossOrigin + ' src=\"' + url + '\">');\n      this.$preview.each(function () {\n        var $this = $(this);\n\n        // Save the original size for recover\n        $this.data(DATA_PREVIEW, {\n          width: $this.width(),\n          height: $this.height(),\n          html: $this.html()\n        });\n\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * (Occur only when margin-top <= -height)\n         */\n        $this.html(\n          '<img' + crossOrigin + ' src=\"' + url + '\" style=\"' +\n          'display:block;width:100%;height:auto;' +\n          'min-width:0!important;min-height:0!important;' +\n          'max-width:none!important;max-height:none!important;' +\n          'image-orientation:0deg!important;\">'\n        );\n      });\n    },\n\n    resetPreview: function () {\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_PREVIEW);\n\n        $this.css({\n          width: data.width,\n          height: data.height\n        }).html(data.html).removeData(DATA_PREVIEW);\n      });\n    },\n\n    preview: function () {\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var cropBoxWidth = cropBox.width;\n      var cropBoxHeight = cropBox.height;\n      var width = image.width;\n      var height = image.height;\n      var left = cropBox.left - canvas.left - image.left;\n      var top = cropBox.top - canvas.top - image.top;\n\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      this.$viewBox.find('img').css({\n        width: width,\n        height: height,\n        marginLeft: -left,\n        marginTop: -top,\n        transform: getTransform(image)\n      });\n\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        $this.css({\n          width: newWidth,\n          height: newHeight\n        }).find('img').css({\n          width: width * ratio,\n          height: height * ratio,\n          marginLeft: -left * ratio,\n          marginTop: -top * ratio,\n          transform: getTransform(image)\n        });\n      });\n    }\n  });\n\n  $.extend(prototype, {\n    bind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.on(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.on(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.on(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.on(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.on(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.cropStart, this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        $cropper.on(EVENT_WHEEL, $.proxy(this.wheel, this));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));\n      }\n\n      $document.\n        on(EVENT_MOUSE_MOVE, (this._cropMove = proxy(this.cropMove, this))).\n        on(EVENT_MOUSE_UP, (this._cropEnd = proxy(this.cropEnd, this)));\n\n      if (options.responsive) {\n        $window.on(EVENT_RESIZE, (this._resize = proxy(this.resize, this)));\n      }\n    },\n\n    unbind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.off(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.off(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.off(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.off(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.off(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.off(EVENT_MOUSE_DOWN, this.cropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        $cropper.off(EVENT_WHEEL, this.wheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        $cropper.off(EVENT_DBLCLICK, this.dblclick);\n      }\n\n      $document.\n        off(EVENT_MOUSE_MOVE, this._cropMove).\n        off(EVENT_MOUSE_UP, this._cropEnd);\n\n      if (options.responsive) {\n        $window.off(EVENT_RESIZE, this._resize);\n      }\n    }\n  });\n\n  $.extend(prototype, {\n    resize: function () {\n      var $container = this.$container;\n      var container = this.container;\n      var canvasData;\n      var cropBoxData;\n      var ratio;\n\n      // Check `container` is necessary for IE8\n      if (this.isDisabled || !container) {\n        return;\n      }\n\n      ratio = $container.width() / container.width;\n\n      // Resize when width changed or height changed\n      if (ratio !== 1 || $container.height() !== container.height) {\n        canvasData = this.getCanvasData();\n        cropBoxData = this.getCropBoxData();\n\n        this.render();\n        this.setCanvasData($.each(canvasData, function (i, n) {\n          canvasData[i] = n * ratio;\n        }));\n        this.setCropBoxData($.each(cropBoxData, function (i, n) {\n          cropBoxData[i] = n * ratio;\n        }));\n      }\n    },\n\n    dblclick: function () {\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (this.$dragBox.hasClass(CLASS_CROP)) {\n        this.setDragMode(ACTION_MOVE);\n      } else {\n        this.setDragMode(ACTION_CROP);\n      }\n    },\n\n    wheel: function (event) {\n      var originalEvent = event.originalEvent;\n      var e = originalEvent || event;\n      var ratio = num(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, originalEvent);\n    },\n\n    cropStart: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = event;\n      var touchesLength;\n      var action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            e = touches[1];\n            this.startX2 = e.pageX;\n            this.startY2 = e.pageY;\n            action = ACTION_ZOOM;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      action = action || $(e.target).data(DATA_ACTION);\n\n      if (REGEXP_ACTIONS.test(action)) {\n        if (this.trigger(EVENT_CROP_START, {\n          originalEvent: originalEvent,\n          action: action\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.action = action;\n        this.cropping = false;\n\n        // IE8  has `event.pageX/Y`, but not `event.originalEvent.pageX/Y`\n        // IE10 has `event.originalEvent.pageX/Y`, but not `event.pageX/Y`\n        this.startX = e.pageX || originalEvent && originalEvent.pageX;\n        this.startY = e.pageY || originalEvent && originalEvent.pageY;\n\n        if (action === ACTION_CROP) {\n          this.cropping = true;\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      }\n    },\n\n    cropMove: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = event;\n      var action = this.action;\n      var touchesLength;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            e = touches[1];\n            this.endX2 = e.pageX;\n            this.endY2 = e.pageY;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      if (action) {\n        if (this.trigger(EVENT_CROP_MOVE, {\n          originalEvent: originalEvent,\n          action: action\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.endX = e.pageX || originalEvent && originalEvent.pageX;\n        this.endY = e.pageY || originalEvent && originalEvent.pageY;\n\n        this.change(e.shiftKey, action === ACTION_ZOOM ? originalEvent : null);\n      }\n    },\n\n    cropEnd: function (event) {\n      var originalEvent = event.originalEvent;\n      var action = this.action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (action) {\n        event.preventDefault();\n\n        if (this.cropping) {\n          this.cropping = false;\n          this.$dragBox.toggleClass(CLASS_MODAL, this.isCropped && this.options.modal);\n        }\n\n        this.action = '';\n\n        this.trigger(EVENT_CROP_END, {\n          originalEvent: originalEvent,\n          action: action\n        });\n      }\n    }\n  });\n\n  $.extend(prototype, {\n    change: function (shiftKey, originalEvent) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var action = this.action;\n      var container = this.container;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var width = cropBox.width;\n      var height = cropBox.height;\n      var left = cropBox.left;\n      var top = cropBox.top;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = container.width;\n      var maxHeight = container.height;\n      var renderable = true;\n      var offset;\n      var range;\n\n      // Locking aspect ratio in \"free mode\" by holding shift key (#259)\n      if (!aspectRatio && shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.limited) {\n        minLeft = cropBox.minLeft;\n        minTop = cropBox.minTop;\n        maxWidth = minLeft + min(container.width, canvas.width);\n        maxHeight = minTop + min(container.height, canvas.height);\n      }\n\n      range = {\n        x: this.endX - this.startX,\n        y: this.endY - this.startY\n      };\n\n      if (aspectRatio) {\n        range.X = range.y * aspectRatio;\n        range.Y = range.x / aspectRatio;\n      }\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n\n        // Resize crop box\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top -= range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left -= range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += range.X;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        // Move canvas\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n\n        // Zoom canvas\n        case ACTION_ZOOM:\n          this.zoom((function (x1, y1, x2, y2) {\n            var z1 = sqrt(x1 * x1 + y1 * y1);\n            var z2 = sqrt(x2 * x2 + y2 * y2);\n\n            return (z2 - z1) / z1;\n          })(\n            abs(this.startX - this.startX2),\n            abs(this.startY - this.startY2),\n            abs(this.endX - this.endX2),\n            abs(this.endY - this.endY2)\n          ), originalEvent);\n          this.startX2 = this.endX2;\n          this.startY2 = this.endY2;\n          renderable = false;\n          break;\n\n        // Create crop box\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = this.$cropper.offset();\n          left = this.startX - offset.left;\n          top = this.startY - offset.top;\n          width = cropBox.minWidth;\n          height = cropBox.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          }\n\n          // Show the crop box if is hidden\n          if (!this.isCropped) {\n            this.$cropBox.removeClass(CLASS_HIDDEN);\n            this.isCropped = true;\n\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        // No default\n      }\n\n      if (renderable) {\n        cropBox.width = width;\n        cropBox.height = height;\n        cropBox.left = left;\n        cropBox.top = top;\n        this.action = action;\n\n        this.renderCropBox();\n      }\n\n      // Override\n      this.startX = this.endX;\n      this.startY = this.endY;\n    }\n  });\n\n  $.extend(prototype, {\n\n    // Show the crop box manually\n    crop: function () {\n      if (!this.isBuilt || this.isDisabled) {\n        return;\n      }\n\n      if (!this.isCropped) {\n        this.isCropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n\n        this.$cropBox.removeClass(CLASS_HIDDEN);\n      }\n\n      this.setCropBoxData(this.initialCropBox);\n    },\n\n    // Reset the image and crop box to their initial states\n    reset: function () {\n      if (!this.isBuilt || this.isDisabled) {\n        return;\n      }\n\n      this.image = $.extend({}, this.initialImage);\n      this.canvas = $.extend({}, this.initialCanvas);\n      this.cropBox = $.extend({}, this.initialCropBox);\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    // Clear the crop box\n    clear: function () {\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      $.extend(this.cropBox, {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      });\n\n      this.isCropped = false;\n      this.renderCropBox();\n\n      this.limitCanvas(true, true);\n\n      // Render canvas after crop box rendered\n      this.renderCanvas();\n\n      this.$dragBox.removeClass(CLASS_MODAL);\n      this.$cropBox.addClass(CLASS_HIDDEN);\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     *\n     * @param {String} url\n     */\n    replace: function (url) {\n      if (!this.isDisabled && url) {\n        if (this.isImg) {\n          this.isReplaced = true;\n          this.$element.attr('src', url);\n        }\n\n        // Clear previous data\n        this.options.data = null;\n        this.load(url);\n      }\n    },\n\n    // Enable (unfreeze) the cropper\n    enable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = false;\n        this.$cropper.removeClass(CLASS_DISABLED);\n      }\n    },\n\n    // Disable (freeze) the cropper\n    disable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = true;\n        this.$cropper.addClass(CLASS_DISABLED);\n      }\n    },\n\n    // Destroy the cropper and remove the instance from the image\n    destroy: function () {\n      var $this = this.$element;\n\n      if (this.isLoaded) {\n        if (this.isImg && this.isReplaced) {\n          $this.attr('src', this.originalUrl);\n        }\n\n        this.unbuild();\n        $this.removeClass(CLASS_HIDDEN);\n      } else {\n        if (this.isImg) {\n          $this.off(EVENT_LOAD, this.start);\n        } else if (this.$clone) {\n          this.$clone.remove();\n        }\n      }\n\n      $this.removeData(NAMESPACE);\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     *\n     * @param {Number} offsetX\n     * @param {Number} offsetY (optional)\n     */\n    move: function (offsetX, offsetY) {\n      var canvas = this.canvas;\n\n      this.moveTo(\n        isUndefined(offsetX) ? offsetX : canvas.left + num(offsetX),\n        isUndefined(offsetY) ? offsetY : canvas.top + num(offsetY)\n      );\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     *\n     * @param {Number} x\n     * @param {Number} y (optional)\n     */\n    moveTo: function (x, y) {\n      var canvas = this.canvas;\n      var isChanged = false;\n\n      // If \"y\" is not present, its default value is \"x\"\n      if (isUndefined(y)) {\n        y = x;\n      }\n\n      x = num(x);\n      y = num(y);\n\n      if (this.isBuilt && !this.isDisabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvas.left = x;\n          isChanged = true;\n        }\n\n        if (isNumber(y)) {\n          canvas.top = y;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderCanvas(true);\n        }\n      }\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoom: function (ratio, _originalEvent) {\n      var canvas = this.canvas;\n\n      ratio = num(ratio);\n\n      if (ratio < 0) {\n        ratio =  1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      this.zoomTo(canvas.width * ratio / canvas.naturalWidth, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoomTo: function (ratio, _originalEvent) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var width = canvas.width;\n      var height = canvas.height;\n      var naturalWidth = canvas.naturalWidth;\n      var naturalHeight = canvas.naturalHeight;\n      var newWidth;\n      var newHeight;\n\n      ratio = num(ratio);\n\n      if (ratio >= 0 && this.isBuilt && !this.isDisabled && options.zoomable) {\n        newWidth = naturalWidth * ratio;\n        newHeight = naturalHeight * ratio;\n\n        if (this.trigger(EVENT_ZOOM, {\n          originalEvent: _originalEvent,\n          oldRatio: width / naturalWidth,\n          ratio: newWidth / naturalWidth\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        canvas.left -= (newWidth - width) / 2;\n        canvas.top -= (newHeight - height) / 2;\n        canvas.width = newWidth;\n        canvas.height = newHeight;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     *\n     * @param {Number} degree\n     */\n    rotate: function (degree) {\n      this.rotateTo((this.image.rotate || 0) + num(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n     *\n     * @param {Number} degree\n     */\n    rotateTo: function (degree) {\n      degree = num(degree);\n\n      if (isNumber(degree) && this.isBuilt && !this.isDisabled && this.options.rotatable) {\n        this.image.rotate = degree % 360;\n        this.isRotated = true;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Scale the image\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n     *\n     * @param {Number} scaleX\n     * @param {Number} scaleY (optional)\n     */\n    scale: function (scaleX, scaleY) {\n      var image = this.image;\n      var isChanged = false;\n\n      // If \"scaleY\" is not present, its default value is \"scaleX\"\n      if (isUndefined(scaleY)) {\n        scaleY = scaleX;\n      }\n\n      scaleX = num(scaleX);\n      scaleY = num(scaleY);\n\n      if (this.isBuilt && !this.isDisabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          image.scaleX = scaleX;\n          isChanged = true;\n        }\n\n        if (isNumber(scaleY)) {\n          image.scaleY = scaleY;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderImage(true);\n        }\n      }\n    },\n\n    /**\n     * Scale the abscissa of the image\n     *\n     * @param {Number} scaleX\n     */\n    scaleX: function (scaleX) {\n      var scaleY = this.image.scaleY;\n\n      this.scale(scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the ordinate of the image\n     *\n     * @param {Number} scaleY\n     */\n    scaleY: function (scaleY) {\n      var scaleX = this.image.scaleX;\n\n      this.scale(isNumber(scaleX) ? scaleX : 1, scaleY);\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     *\n     * @param {Boolean} isRounded (optional)\n     * @return {Object} data\n     */\n    getData: function (isRounded) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var ratio;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          x: cropBox.left - canvas.left,\n          y: cropBox.top - canvas.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n\n        ratio = image.width / image.naturalWidth;\n\n        $.each(data, function (i, n) {\n          n = n / ratio;\n          data[i] = isRounded ? round(n) : n;\n        });\n\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = image.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = image.scaleX || 1;\n        data.scaleY = image.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     *\n     * @param {Object} data\n     */\n    setData: function (data) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBoxData = {};\n      var isRotated;\n      var isScaled;\n      var ratio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== image.rotate) {\n            image.rotate = data.rotate;\n            this.isRotated = isRotated = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== image.scaleX) {\n            image.scaleX = data.scaleX;\n            isScaled = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== image.scaleY) {\n            image.scaleY = data.scaleY;\n            isScaled = true;\n          }\n        }\n\n        if (isRotated) {\n          this.renderCanvas();\n        } else if (isScaled) {\n          this.renderImage();\n        }\n\n        ratio = image.width / image.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvas.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvas.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n    },\n\n    /**\n     * Get the container size data\n     *\n     * @return {Object} data\n     */\n    getContainerData: function () {\n      return this.isBuilt ? this.container : {};\n    },\n\n    /**\n     * Get the image position and size data\n     *\n     * @return {Object} data\n     */\n    getImageData: function () {\n      return this.isLoaded ? this.image : {};\n    },\n\n    /**\n     * Get the canvas position and size data\n     *\n     * @return {Object} data\n     */\n    getCanvasData: function () {\n      var canvas = this.canvas;\n      var data = {};\n\n      if (this.isBuilt) {\n        $.each([\n          'left',\n          'top',\n          'width',\n          'height',\n          'naturalWidth',\n          'naturalHeight'\n        ], function (i, n) {\n          data[n] = canvas[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCanvasData: function (data) {\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvas.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvas.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvas.width = data.width;\n          canvas.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvas.height = data.height;\n          canvas.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Get the crop box position and size data\n     *\n     * @return {Object} data\n     */\n    getCropBoxData: function () {\n      var cropBox = this.cropBox;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          left: cropBox.left,\n          top: cropBox.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCropBoxData: function (data) {\n      var cropBox = this.cropBox;\n      var aspectRatio = this.options.aspectRatio;\n      var isWidthChanged;\n      var isHeightChanged;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.isBuilt && this.isCropped && !this.isDisabled && $.isPlainObject(data)) {\n\n        if (isNumber(data.left)) {\n          cropBox.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBox.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBox.width) {\n          isWidthChanged = true;\n          cropBox.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBox.height) {\n          isHeightChanged = true;\n          cropBox.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (isWidthChanged) {\n            cropBox.height = cropBox.width / aspectRatio;\n          } else if (isHeightChanged) {\n            cropBox.width = cropBox.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n    },\n\n    /**\n     * Get a canvas drawn the cropped image\n     *\n     * @param {Object} options (optional)\n     * @return {HTMLCanvasElement} canvas\n     */\n    getCroppedCanvas: function (options) {\n      var originalWidth;\n      var originalHeight;\n      var canvasWidth;\n      var canvasHeight;\n      var scaledWidth;\n      var scaledHeight;\n      var scaledRatio;\n      var aspectRatio;\n      var canvas;\n      var context;\n      var data;\n\n      if (!this.isBuilt || !this.isCropped || !SUPPORT_CANVAS) {\n        return;\n      }\n\n      if (!$.isPlainObject(options)) {\n        options = {};\n      }\n\n      data = this.getData();\n      originalWidth = data.width;\n      originalHeight = data.height;\n      aspectRatio = originalWidth / originalHeight;\n\n      if ($.isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      }\n\n\n      canvasWidth = round(scaledWidth || originalWidth);\n      canvasHeight = round(scaledHeight || originalHeight);\n\n      canvas = $('<canvas>')[0];\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      context = canvas.getContext('2d');\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      context.drawImage.apply(context, (function () {\n        var source = getSourceCanvas(this.$clone[0], this.image);\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        var args = [source];\n\n        // Source canvas\n        var srcX = data.x;\n        var srcY = data.y;\n        var srcWidth;\n        var srcHeight;\n\n        // Destination canvas\n        var dstX;\n        var dstY;\n        var dstWidth;\n        var dstHeight;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);\n        }\n\n        args.push(srcX, srcY, srcWidth, srcHeight);\n\n        // Scale destination sizes\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        }\n\n        // Avoid \"IndexSizeError\" in IE and Firefox\n        if (dstWidth > 0 && dstHeight > 0) {\n          args.push(dstX, dstY, dstWidth, dstHeight);\n        }\n\n        return args;\n      }).call(this));\n\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box\n     *\n     * @param {Number} aspectRatio\n     */\n    setAspectRatio: function (aspectRatio) {\n      var options = this.options;\n\n      if (!this.isDisabled && !isUndefined(aspectRatio)) {\n\n        // 0 -> NaN\n        options.aspectRatio = max(0, aspectRatio) || NaN;\n\n        if (this.isBuilt) {\n          this.initCropBox();\n\n          if (this.isCropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n    },\n\n    /**\n     * Change the drag mode\n     *\n     * @param {String} mode (optional)\n     */\n    setDragMode: function (mode) {\n      var options = this.options;\n      var croppable;\n      var movable;\n\n      if (this.isLoaded && !this.isDisabled) {\n        croppable = mode === ACTION_CROP;\n        movable = options.movable && mode === ACTION_MOVE;\n        mode = (croppable || movable) ? mode : ACTION_NONE;\n\n        this.$dragBox.\n          data(DATA_ACTION, mode).\n          toggleClass(CLASS_CROP, croppable).\n          toggleClass(CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n\n          // Sync drag mode to crop box when it is not movable(#300)\n          this.$face.\n            data(DATA_ACTION, mode).\n            toggleClass(CLASS_CROP, croppable).\n            toggleClass(CLASS_MOVE, movable);\n        }\n      }\n    }\n  });\n\n  $.extend(Cropper.prototype, prototype);\n\n  Cropper.DEFAULTS = {\n\n    // Define the view mode of the cropper\n    viewMode: 0, // 0, 1, 2, 3\n\n    // Define the dragging mode of the cropper\n    dragMode: 'crop', // 'crop', 'move' or 'none'\n\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n\n    // An object with the previous cropping result data\n    data: null,\n\n    // A jQuery selector for adding extra containers to preview\n    preview: '',\n\n    // Rebuild when resize the window\n    responsive: true,\n\n    // Check if the target image is cross origin\n    checkCrossOrigin: true,\n\n    // Show the black modal\n    modal: true,\n\n    // Show the dashed lines for guiding\n    guides: true,\n\n    // Show the center indicator for guiding\n    center: true,\n\n    // Show the white modal to highlight the crop box\n    highlight: true,\n\n    // Show the grid background\n    background: true,\n\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n\n    // Enable to move the image\n    movable: true,\n\n    // Enable to rotate the image\n    rotatable: true,\n\n    // Enable to scale the image\n    scalable: true,\n\n    // Enable to zoom the image\n    zoomable: true,\n\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n\n    // Enable to move the crop box\n    cropBoxMovable: true,\n\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n\n    // Shortcuts of events\n    build: null,\n    built: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  Cropper.setDefaults = function (options) {\n    $.extend(Cropper.DEFAULTS, options);\n  };\n\n  Cropper.TEMPLATE = (\n    '<div class=\"cropper-container\">' +\n      '<div class=\"cropper-wrap-box\">' +\n        '<div class=\"cropper-canvas\"></div>' +\n      '</div>' +\n      '<div class=\"cropper-drag-box\"></div>' +\n      '<div class=\"cropper-crop-box\">' +\n        '<span class=\"cropper-view-box\"></span>' +\n        '<span class=\"cropper-dashed dashed-h\"></span>' +\n        '<span class=\"cropper-dashed dashed-v\"></span>' +\n        '<span class=\"cropper-center\"></span>' +\n        '<span class=\"cropper-face\"></span>' +\n        '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' +\n        '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' +\n        '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' +\n        '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' +\n      '</div>' +\n    '</div>'\n  );\n\n  // Save the other cropper\n  Cropper.other = $.fn.cropper;\n\n  // Register as jQuery plugin\n  $.fn.cropper = function (options) {\n    var args = toArray(arguments, 1);\n    var result;\n\n    this.each(function () {\n      var $this = $(this);\n      var data = $this.data(NAMESPACE);\n      var fn;\n\n      if (!data) {\n        if (/destroy/.test(options)) {\n          return;\n        }\n\n        $this.data(NAMESPACE, (data = new Cropper(this, options)));\n      }\n\n      if (typeof options === 'string' && $.isFunction(fn = data[options])) {\n        result = fn.apply(data, args);\n      }\n    });\n\n    return isUndefined(result) ? this : result;\n  };\n\n  $.fn.cropper.Constructor = Cropper;\n  $.fn.cropper.setDefaults = Cropper.setDefaults;\n\n  // No conflict\n  $.fn.cropper.noConflict = function () {\n    $.fn.cropper = Cropper.other;\n    return this;\n  };\n\n});\n",";\n(function (window) {\n    'use strict';\n\n    /**\n     * ImageEditor constructor\n     */\n    function ImageEditor(el) {\n        this.el = el;\n\n        this.image = this.el.find('img.image-editable');\n        this.form = this.el.find('form');\n        this.actionInput = this.form.find('input[name=\"action\"]');\n\n        this._init();\n    }\n\n    // ImageEditor prototype\n    ImageEditor.prototype = {\n        // Initializes editor\n        _init: function () {\n            this.cropButton = $('#crop');\n            this.rotateLeftButton = $('#rotate-left');\n            this.rotateRightButton = $('#rotate-right');\n            this.flipHorizontalButton = $('#flip-horizontal');\n            this.flipVerticalButton = $('#flip-vertical');\n\n            this._initEvents();\n        },\n        // Initializes events\n        _initEvents: function () {\n            var self = this;\n\n            this.rotateLeftButton.bind('click', function () {\n                self._rotateLeft();\n            });\n\n            this.rotateRightButton.bind('click', function () {\n                self._rotateRight();\n            });\n\n            this.flipHorizontalButton.bind('click', function () {\n                self._flipHorizontal();\n            });\n\n            this.flipVerticalButton.bind('click', function () {\n                self._flipVertical();\n            });\n\n            this._initCropper();\n        },\n        // Initializes cropper\n        _initCropper: function () {\n            var self = this;\n\n            this._cropEnabled = false;\n\n            this.image.cropper({\n                movable: false,\n                zoomable: false,\n                rotatable: false,\n                scalable: false,\n                autoCrop: false\n            });\n\n            this.image.on('cropend.cropper', function () {\n                self.cropButton.removeClass('disabled');\n                self._cropEnabled = true;\n            });\n\n            this.cropButton.bind('click', function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                if (self._cropEnabled) {\n                    self._crop();\n                }\n            });\n        },\n        //\n        _crop: function () {\n            var data = this.image.cropper('getData');\n\n            this.actionInput.val('crop_' +\n                Math.floor(data.width) + ',' +\n                Math.floor(data.height) + ',' +\n                Math.floor(data.x) + ',' +\n                Math.floor(data.y)\n            );\n\n            this._submit();\n        },\n        _rotateLeft: function () {\n            this.actionInput.val('rotate_90');\n            this._submit();\n        },\n        _rotateRight: function () {\n            this.actionInput.val('rotate_270');\n            this._submit();\n        },\n        _flipHorizontal: function () {\n            this.actionInput.val('flip_h');\n            this._submit();\n        },\n        _flipVertical: function () {\n            this.actionInput.val('flip_v');\n            this._submit();\n        },\n        _submit: function()\n        {\n            this.form.submit();\n        }\n    };\n\n    // Register meter to window namespace\n    window.ImageEditor = ImageEditor;\n\n})(window);\n\n$(function () {\n    return new ImageEditor($('.document-edit-container'));\n});"],"sourceRoot":"/source/"}