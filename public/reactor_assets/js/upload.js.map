{"version":3,"sources":["upload.js"],"names":["window","Uploader","zone","options","this","_init","Indicator","name","size","prototype","self","defaults","selectButton","uploadInput","outputList","indicator","enabled","append","$","extend","action","attr","fileQueue","statusIndicators","current","inProcess","maxsize","data","_initEvents","bind","e","preventDefault","stopPropagation","addClass","removeClass","queue","originalEvent","dataTransfer","files","click","i","length","fd","FormData","push","_createIndicator","html_entities","parent","prepend","_upload","className","ajax","xhr","xhrobj","ajaxSettings","upload","addEventListener","setProgress","loaded","url","type","contentType","processData","cache","success","complete","always","progressContainer","appendTo","progressBar","messageWrapper","thumbnail","container","filename","message","readable_size","clone","percent","width","toString","reply","_success","response","_error","html","mimetype","text"],"mappings":"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","file":"upload.js","sourcesContent":[";(function (window) {\n    'use strict';\n\n    // Uploader Constructor\n    function Uploader(zone, options) {\n        this._init(zone, options);\n    }\n\n    // Uploader\n    Uploader.prototype = {\n        /**\n         * Constructor\n         *\n         * @param DOM Object\n         * @param array\n         */\n        _init: function (self, options) {\n            this.zone = self;\n\n            var defaults = {\n                selectButton: '#dropzone-select-button',\n                uploadInput: '#dropzone-file',\n                outputList: '#upload-list',\n                indicator: null,\n                enabled: true,\n                append: true\n            };\n\n            this.options = $.extend(defaults, options);\n            this.action = $(this.zone).attr('action');\n\n            this.fileQueue = [];\n            this.statusIndicators = [];\n            this.current = 0;\n            this.inProcess = false;\n\n            this.maxsize = this.zone.data('maxsize');\n\n            this._initEvents();\n        },\n        /**\n         * Binds events\n         */\n        _initEvents: function () {\n            var self = this;\n\n            // Class binds\n            this.zone.bind(\"dragenter, dragover\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                $(this).addClass('dragenter');\n            });\n\n            this.zone.bind(\"dragleave\", function () {\n                $(this).removeClass('dragenter');\n            });\n\n            // Disable window drop\n            $(window).bind('drop', function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Bind file drop\n            this.zone.bind(\"drop\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                self.queue(e.originalEvent.dataTransfer.files);\n\n                $(this).removeClass('dragenter');\n            });\n\n            // Bind input change\n            $(this.options.uploadInput).bind(\"change\", function () {\n                self.queue($(this)[0].files);\n            });\n\n            // Bind optional select button if exists\n            if (this.options.selectButton !== false) {\n                $(this.options.selectButton).bind(\"click\", function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    $(self.options.uploadInput).click();\n                });\n            }\n        },\n        /**\n         * Adds new files to the queue\n         *\n         * @param array\n         */\n        queue: function (files) {\n            if (!this.options.enabled) {\n                return false;\n            }\n\n            for (var i = 0; i < files.length; i++) {\n                if (files[i].size < this.maxsize) {\n\n                    var fd = new FormData();\n                    fd.append('file', files[i]);\n\n                    this.fileQueue.push(fd);\n\n                    // Escape the file name in order to prevent XSS\n                    var indicator = this._createIndicator(html_entities(files[i].name), files[i].size);\n\n                    this.statusIndicators.push(indicator);\n\n                    if (this.options.outputList !== false) {\n                        if (this.options.append === true) {\n                            $(this.options.outputList).append(indicator.parent);\n                        } else {\n                            $(this.options.outputList).prepend(indicator.parent);\n                        }\n\n                    }\n                }\n            }\n\n            if (this.inProcess === false) {\n                this._upload();\n            }\n        },\n        /**\n         * Creates an upload indicator\n         */\n        _createIndicator: function(name, size)\n        {\n            var className = (!this.options.indicator) ? 'Indicator' : this.options.indicator;\n\n            className = window[className];\n\n            return new className(name, size);\n        },\n        /**\n         * Iterates through queue and uploads files\n         */\n        _upload: function () {\n            var self = this;\n\n            if (this.current < this.fileQueue.length) {\n                this.inProcess = true;\n\n                var fd = this.fileQueue[this.current],\n                    indicator = this.statusIndicators[this.current];\n\n                $.ajax({\n                        xhr: function () {\n                            var xhrobj = $.ajaxSettings.xhr();\n\n                            if (xhrobj.upload) {\n                                xhrobj.upload.addEventListener('progress', function (e) {\n                                    indicator.setProgress(loaded(e));\n                                });\n                            }\n\n                            return xhrobj;\n                        },\n\n                        url: self.action,\n                        type: 'POST',\n                        contentType: false,\n                        processData: false,\n                        cache: false,\n                        data: fd,\n\n                        success: function (data) {\n                            indicator.complete(data);\n                        }\n                    })\n                    .always(function () {\n                        self.current++;\n                        self._upload();\n                    });\n\n            } else {\n                this.inProcess = false;\n            }\n        }\n    };\n\n    window.Uploader = Uploader;\n\n\n    // Indicator Constructor\n    function Indicator(name, size) {\n        this._init(name, size);\n    }\n\n    // Indicator\n    Indicator.prototype = {\n        /**\n         * Constructor\n         *\n         * @param string\n         * @param int\n         */\n        _init: function (name, size) {\n            // Parent\n            this.parent = $('<li class=\"material-light\"></li>');\n            // Progress bar\n            this.progressContainer = $('<div class=\"upload-progress-container\"></div>').appendTo(this.parent);\n            this.progressBar = $('<div class=\"upload-progress-bar\"></div>').appendTo(this.progressContainer);\n\n            // Indicator wrapper\n            this.messageWrapper = $('<div class=\"upload-message-wrapper\"></div>').appendTo(this.parent);\n\n            // Icon\n            this.thumbnail = $('<span class=\"upload-thumbnail\"></span>').appendTo(this.messageWrapper);\n            // Container\n            this.container = $('<p></p>').appendTo(this.messageWrapper);\n            // File name\n            this.filename = $('<span class=\"upload-text\">' + name + '</span>').appendTo(this.container);\n            // File size / Message\n            this.message = $('<span class=\"upload-text muted\">' + readable_size(size) + '</span>').appendTo(this.container);\n\n            // Clone filename and message\n            this.container.clone().appendTo(this.progressContainer);\n        },\n        /**\n         * Set the progressbar width\n         *\n         * @param int\n         */\n        setProgress: function (percent) {\n            this.progressBar.width(percent.toString() + \"%\");\n        },\n        /**\n         * Takes action on the completed upload\n         *\n         * @param json\n         */\n        complete: function (reply) {\n            this.setProgress(100);\n\n            if (reply.type === 'success') {\n                this._success(reply.response);\n            } else if (reply.type === 'error') {\n                this._error(reply);\n            }\n        },\n        /**\n         * Makes the UI changes when upload is completed\n         *\n         * @param json string\n         */\n        _success: function (data) {\n            $(this.parent).addClass('complete');\n\n            this.thumbnail.html(data.thumbnail);\n\n            this.message.html(data.mimetype + ' | ' + this.message.text());\n        },\n        /**\n         * Makes the UI changes when upload returns error\n         *\n         * @param json string\n         */\n        _error: function (data) {\n            $(this.parent).addClass('error');\n\n            $(this.thumbnail).html('<i class=\"icon-cancel\"></i>');\n\n            $(this.message).html(data.response);\n        }\n    };\n\n    // Register indicator to the window namespace\n    window.Indicator = Indicator;\n\n})(window);"],"sourceRoot":"/source/"}