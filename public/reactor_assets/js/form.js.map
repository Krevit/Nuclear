{"version":3,"sources":["minicolors.js","password.js","slug.js","tag_legacy.js","upload.js","library.js","gallery.js","document.js","node_collection.js","editor.js","fields.js"],"names":[],"mappingsgpzlovHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACniBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"form.js","sourcesContent":["/*\n * jQuery MiniColors: A tiny color picker built on jQuery\n *\n * Copyright: Cory LaViska for A Beautiful Site, LLC: http://www.abeautifulsite.net/\n *\n * Contribute: https://github.com/claviska/jquery-minicolors\n *\n * @license: http://opensource.org/licenses/MIT\n *\n */\n(function (factory) {\n    /* jshint ignore:start */\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n    /* jshint ignore:end */\n}(function ($) {\n\n    // Defaults\n    $.minicolors = {\n        defaults: {\n            animationSpeed: 50,\n            animationEasing: 'swing',\n            change: null,\n            changeDelay: 0,\n            control: 'hue',\n            dataUris: true,\n            defaultValue: '',\n            format: 'hex',\n            hide: null,\n            hideSpeed: 100,\n            inline: false,\n            keywords: '',\n            letterCase: 'lowercase',\n            opacity: false,\n            position: 'bottom left',\n            show: null,\n            showSpeed: 100,\n            theme: 'default'\n        }\n    };\n\n    // Public methods\n    $.extend($.fn, {\n        minicolors: function(method, data) {\n\n            switch(method) {\n\n                // Destroy the control\n                case 'destroy':\n                    $(this).each( function() {\n                        destroy($(this));\n                    });\n                    return $(this);\n\n                // Hide the color picker\n                case 'hide':\n                    hide();\n                    return $(this);\n\n                // Get/set opacity\n                case 'opacity':\n                    // Getter\n                    if( data === undefined ) {\n                        // Getter\n                        return $(this).attr('data-opacity');\n                    } else {\n                        // Setter\n                        $(this).each( function() {\n                            updateFromInput($(this).attr('data-opacity', data));\n                        });\n                    }\n                    return $(this);\n\n                // Get an RGB(A) object based on the current color/opacity\n                case 'rgbObject':\n                    return rgbObject($(this), method === 'rgbaObject');\n\n                // Get an RGB(A) string based on the current color/opacity\n                case 'rgbString':\n                case 'rgbaString':\n                    return rgbString($(this), method === 'rgbaString');\n\n                // Get/set settings on the fly\n                case 'settings':\n                    if( data === undefined ) {\n                        return $(this).data('minicolors-settings');\n                    } else {\n                        // Setter\n                        $(this).each( function() {\n                            var settings = $(this).data('minicolors-settings') || {};\n                            destroy($(this));\n                            $(this).minicolors($.extend(true, settings, data));\n                        });\n                    }\n                    return $(this);\n\n                // Show the color picker\n                case 'show':\n                    show( $(this).eq(0) );\n                    return $(this);\n\n                // Get/set the hex color value\n                case 'value':\n                    if( data === undefined ) {\n                        // Getter\n                        return $(this).val();\n                    } else {\n                        // Setter\n                        $(this).each( function() {\n                            if( typeof(data) === 'object' ) {\n                                if( data.opacity ) {\n                                    $(this).attr('data-opacity', keepWithin(data.opacity, 0, 1));\n                                }\n                                if( data.color ) {\n                                    $(this).val(data.color);\n                                }\n                            } else {\n                                $(this).val(data);\n                            }\n                            updateFromInput($(this));\n                        });\n                    }\n                    return $(this);\n\n                // Initializes the control\n                default:\n                    if( method !== 'create' ) data = method;\n                    $(this).each( function() {\n                        init($(this), data);\n                    });\n                    return $(this);\n\n            }\n\n        }\n    });\n\n    // Initialize input elements\n    function init(input, settings) {\n\n        var minicolors = $('<div class=\"minicolors\" />'),\n            defaults = $.minicolors.defaults,\n            format = input.attr('data-format'),\n            keywords = input.attr('data-keywords'),\n            opacity = input.attr('data-opacity');\n\n        // Do nothing if already initialized\n        if( input.data('minicolors-initialized') ) return;\n\n        // Handle settings\n        settings = $.extend(true, {}, defaults, settings);\n\n        // The wrapper\n        minicolors\n            .addClass('minicolors-theme-' + settings.theme)\n            .toggleClass('minicolors-with-opacity', settings.opacity)\n            .toggleClass('minicolors-no-data-uris', settings.dataUris !== true);\n\n        // Custom positioning\n        if( settings.position !== undefined ) {\n            $.each(settings.position.split(' '), function() {\n                minicolors.addClass('minicolors-position-' + this);\n            });\n        }\n\n        // Input size\n        if( format === 'rgb' ) {\n            $input_size = opacity ? '25' : '20';\n        } else {\n            $input_size = keywords ? '11' : '7';\n        }\n\n        // The input\n        input\n            .addClass('minicolors-input')\n            .data('minicolors-initialized', false)\n            .data('minicolors-settings', settings)\n            .prop('size', $input_size)\n            .wrap(minicolors)\n            .after(\n                '<div class=\"minicolors-panel minicolors-slider-' + settings.control + '\">' +\n                    '<div class=\"minicolors-slider minicolors-sprite\">' +\n                        '<div class=\"minicolors-picker\"></div>' +\n                    '</div>' +\n                    '<div class=\"minicolors-opacity-slider minicolors-sprite\">' +\n                        '<div class=\"minicolors-picker\"></div>' +\n                    '</div>' +\n                    '<div class=\"minicolors-grid minicolors-sprite\">' +\n                        '<div class=\"minicolors-grid-inner\"></div>' +\n                        '<div class=\"minicolors-picker\"><div></div></div>' +\n                    '</div>' +\n                '</div>'\n            );\n\n        // The swatch\n        if( !settings.inline ) {\n            input.after('<span class=\"minicolors-swatch minicolors-sprite\"><span class=\"minicolors-swatch-color\"></span></span>');\n            input.next('.minicolors-swatch').on('click', function(event) {\n                event.preventDefault();\n                input.focus();\n            });\n        }\n\n        // Prevent text selection in IE\n        input.parent().find('.minicolors-panel').on('selectstart', function() { return false; }).end();\n\n        // Inline controls\n        if( settings.inline ) input.parent().addClass('minicolors-inline');\n\n        updateFromInput(input, false);\n\n        input.data('minicolors-initialized', true);\n\n    }\n\n    // Returns the input back to its original state\n    function destroy(input) {\n\n        var minicolors = input.parent();\n\n        // Revert the input element\n        input\n            .removeData('minicolors-initialized')\n            .removeData('minicolors-settings')\n            .removeProp('size')\n            .removeClass('minicolors-input');\n\n        // Remove the wrap and destroy whatever remains\n        minicolors.before(input).remove();\n\n    }\n\n    // Shows the specified dropdown panel\n    function show(input) {\n\n        var minicolors = input.parent(),\n            panel = minicolors.find('.minicolors-panel'),\n            settings = input.data('minicolors-settings');\n\n        // Do nothing if uninitialized, disabled, inline, or already open\n        if( !input.data('minicolors-initialized') ||\n            input.prop('disabled') ||\n            minicolors.hasClass('minicolors-inline') ||\n            minicolors.hasClass('minicolors-focus')\n        ) return;\n\n        hide();\n\n        minicolors.addClass('minicolors-focus');\n        panel\n            .stop(true, true)\n            .fadeIn(settings.showSpeed, function() {\n                if( settings.show ) settings.show.call(input.get(0));\n            });\n\n    }\n\n    // Hides all dropdown panels\n    function hide() {\n\n        $('.minicolors-focus').each( function() {\n\n            var minicolors = $(this),\n                input = minicolors.find('.minicolors-input'),\n                panel = minicolors.find('.minicolors-panel'),\n                settings = input.data('minicolors-settings');\n\n            panel.fadeOut(settings.hideSpeed, function() {\n                if( settings.hide ) settings.hide.call(input.get(0));\n                minicolors.removeClass('minicolors-focus');\n            });\n\n        });\n    }\n\n    // Moves the selected picker\n    function move(target, event, animate) {\n\n        var input = target.parents('.minicolors').find('.minicolors-input'),\n            settings = input.data('minicolors-settings'),\n            picker = target.find('[class$=-picker]'),\n            offsetX = target.offset().left,\n            offsetY = target.offset().top,\n            x = Math.round(event.pageX - offsetX),\n            y = Math.round(event.pageY - offsetY),\n            duration = animate ? settings.animationSpeed : 0,\n            wx, wy, r, phi;\n\n        // Touch support\n        if( event.originalEvent.changedTouches ) {\n            x = event.originalEvent.changedTouches[0].pageX - offsetX;\n            y = event.originalEvent.changedTouches[0].pageY - offsetY;\n        }\n\n        // Constrain picker to its container\n        if( x < 0 ) x = 0;\n        if( y < 0 ) y = 0;\n        if( x > target.width() ) x = target.width();\n        if( y > target.height() ) y = target.height();\n\n        // Constrain color wheel values to the wheel\n        if( target.parent().is('.minicolors-slider-wheel') && picker.parent().is('.minicolors-grid') ) {\n            wx = 75 - x;\n            wy = 75 - y;\n            r = Math.sqrt(wx * wx + wy * wy);\n            phi = Math.atan2(wy, wx);\n            if( phi < 0 ) phi += Math.PI * 2;\n            if( r > 75 ) {\n                r = 75;\n                x = 75 - (75 * Math.cos(phi));\n                y = 75 - (75 * Math.sin(phi));\n            }\n            x = Math.round(x);\n            y = Math.round(y);\n        }\n\n        // Move the picker\n        if( target.is('.minicolors-grid') ) {\n            picker\n                .stop(true)\n                .animate({\n                    top: y + 'px',\n                    left: x + 'px'\n                }, duration, settings.animationEasing, function() {\n                    updateFromControl(input, target);\n                });\n        } else {\n            picker\n                .stop(true)\n                .animate({\n                    top: y + 'px'\n                }, duration, settings.animationEasing, function() {\n                    updateFromControl(input, target);\n                });\n        }\n\n    }\n\n    // Sets the input based on the color picker values\n    function updateFromControl(input, target) {\n\n        function getCoords(picker, container) {\n\n            var left, top;\n            if( !picker.length || !container ) return null;\n            left = picker.offset().left;\n            top = picker.offset().top;\n\n            return {\n                x: left - container.offset().left + (picker.outerWidth() / 2),\n                y: top - container.offset().top + (picker.outerHeight() / 2)\n            };\n\n        }\n\n        var hue, saturation, brightness, x, y, r, phi,\n\n            hex = input.val(),\n            format = input.attr('data-format'),\n            keywords = input.attr('data-keywords'),\n            opacity = input.attr('data-opacity'),\n\n            // Helpful references\n            minicolors = input.parent(),\n            settings = input.data('minicolors-settings'),\n            swatch = minicolors.find('.minicolors-swatch'),\n\n            // Panel objects\n            grid = minicolors.find('.minicolors-grid'),\n            slider = minicolors.find('.minicolors-slider'),\n            opacitySlider = minicolors.find('.minicolors-opacity-slider'),\n\n            // Picker objects\n            gridPicker = grid.find('[class$=-picker]'),\n            sliderPicker = slider.find('[class$=-picker]'),\n            opacityPicker = opacitySlider.find('[class$=-picker]'),\n\n            // Picker positions\n            gridPos = getCoords(gridPicker, grid),\n            sliderPos = getCoords(sliderPicker, slider),\n            opacityPos = getCoords(opacityPicker, opacitySlider);\n\n        // Handle colors\n        if( target.is('.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider') ) {\n\n            // Determine HSB values\n            switch(settings.control) {\n\n                case 'wheel':\n                    // Calculate hue, saturation, and brightness\n                    x = (grid.width() / 2) - gridPos.x;\n                    y = (grid.height() / 2) - gridPos.y;\n                    r = Math.sqrt(x * x + y * y);\n                    phi = Math.atan2(y, x);\n                    if( phi < 0 ) phi += Math.PI * 2;\n                    if( r > 75 ) {\n                        r = 75;\n                        gridPos.x = 69 - (75 * Math.cos(phi));\n                        gridPos.y = 69 - (75 * Math.sin(phi));\n                    }\n                    saturation = keepWithin(r / 0.75, 0, 100);\n                    hue = keepWithin(phi * 180 / Math.PI, 0, 360);\n                    brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);\n                    hex = hsb2hex({\n                        h: hue,\n                        s: saturation,\n                        b: brightness\n                    });\n\n                    // Update UI\n                    slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));\n                    break;\n\n                case 'saturation':\n                    // Calculate hue, saturation, and brightness\n                    hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);\n                    saturation = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);\n                    brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);\n                    hex = hsb2hex({\n                        h: hue,\n                        s: saturation,\n                        b: brightness\n                    });\n\n                    // Update UI\n                    slider.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: brightness }));\n                    minicolors.find('.minicolors-grid-inner').css('opacity', saturation / 100);\n                    break;\n\n                case 'brightness':\n                    // Calculate hue, saturation, and brightness\n                    hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);\n                    saturation = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);\n                    brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);\n                    hex = hsb2hex({\n                        h: hue,\n                        s: saturation,\n                        b: brightness\n                    });\n\n                    // Update UI\n                    slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));\n                    minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (brightness / 100));\n                    break;\n\n                default:\n                    // Calculate hue, saturation, and brightness\n                    hue = keepWithin(360 - parseInt(sliderPos.y * (360 / slider.height()), 10), 0, 360);\n                    saturation = keepWithin(Math.floor(gridPos.x * (100 / grid.width())), 0, 100);\n                    brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);\n                    hex = hsb2hex({\n                        h: hue,\n                        s: saturation,\n                        b: brightness\n                    });\n\n                    // Update UI\n                    grid.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: 100 }));\n                    break;\n\n            }\n\n            // Handle opacity\n            if( settings.opacity ) {\n                opacity = parseFloat(1 - (opacityPos.y / opacitySlider.height())).toFixed(2);\n            } else {\n                opacity = 1;\n            }\n            if( settings.opacity ) input.attr('data-opacity', opacity);\n\n            // Set color string\n            if( format === 'rgb' ) {\n                // Returns RGB(A) string\n                var rgb = hex2rgb(hex),\n                    opacity = input.attr('data-opacity') === '' ? 1 : keepWithin( parseFloat( input.attr('data-opacity') ).toFixed(2), 0, 1 );\n                if( isNaN( opacity ) || !settings.opacity ) opacity = 1;\n\n                if( input.minicolors('rgbObject').a <= 1 && rgb && settings.opacity) {\n                    // Set RGBA string if alpha\n                    value = 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat( opacity ) + ')';\n                } else {\n                    // Set RGB string (alpha = 1)\n                    value = 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';\n                }\n            } else {\n                // Returns hex color\n                value = convertCase( hex, settings.letterCase );\n            }\n\n            // Update value from picker\n            input.val( value );\n        }\n\n        // Set swatch color\n        swatch.find('span').css({\n            backgroundColor: hex,\n            opacity: opacity\n        });\n\n        // Handle change event\n        doChange(input, value, opacity);\n\n    }\n\n    // Sets the color picker values from the input\n    function updateFromInput(input, preserveInputValue) {\n\n        var hex,\n            hsb,\n            format = input.attr('data-format'),\n            keywords = input.attr('data-keywords'),\n            opacity,\n            x, y, r, phi,\n\n            // Helpful references\n            minicolors = input.parent(),\n            settings = input.data('minicolors-settings'),\n            swatch = minicolors.find('.minicolors-swatch'),\n\n            // Panel objects\n            grid = minicolors.find('.minicolors-grid'),\n            slider = minicolors.find('.minicolors-slider'),\n            opacitySlider = minicolors.find('.minicolors-opacity-slider'),\n\n            // Picker objects\n            gridPicker = grid.find('[class$=-picker]'),\n            sliderPicker = slider.find('[class$=-picker]'),\n            opacityPicker = opacitySlider.find('[class$=-picker]');\n\n        // Determine hex/HSB values\n        if( isRgb(input.val()) ) {\n            // If input value is a rgb(a) string, convert it to hex color and update opacity\n            hex = rgbString2hex(input.val());\n            alpha = keepWithin(parseFloat(getAlpha(input.val())).toFixed(2), 0, 1);\n            if( alpha ) {\n                input.attr('data-opacity', alpha);\n            }\n        } else {\n            hex = convertCase(parseHex(input.val(), true), settings.letterCase);\n        }\n\n        if( !hex ){\n            hex = convertCase(parseInput(settings.defaultValue, true), settings.letterCase);\n        }\n        hsb = hex2hsb(hex);\n\n        // Get array of lowercase keywords\n        keywords = !keywords ? [] : $.map(keywords.split(','), function(a) {\n            return $.trim(a.toLowerCase());\n        });\n\n        // Set color string\n        if( input.val() !== '' && $.inArray(input.val().toLowerCase(), keywords) > -1 ) {\n            value = convertCase(input.val());\n        } else {\n            value = isRgb(input.val()) ? parseRgb(input.val()) : hex;\n        }\n\n        // Update input value\n        if( !preserveInputValue ) input.val(value);\n\n        // Determine opacity value\n        if( settings.opacity ) {\n            // Get from data-opacity attribute and keep within 0-1 range\n            opacity = input.attr('data-opacity') === '' ? 1 : keepWithin(parseFloat(input.attr('data-opacity')).toFixed(2), 0, 1);\n            if( isNaN(opacity) ) opacity = 1;\n            input.attr('data-opacity', opacity);\n            swatch.find('span').css('opacity', opacity);\n\n            // Set opacity picker position\n            y = keepWithin(opacitySlider.height() - (opacitySlider.height() * opacity), 0, opacitySlider.height());\n            opacityPicker.css('top', y + 'px');\n        }\n\n        // Set opacity to zero if input value is transparent\n        if( input.val().toLowerCase() === 'transparent' ) {\n            swatch.find('span').css('opacity', 0);\n        }\n\n        // Update swatch\n        swatch.find('span').css('backgroundColor', hex);\n\n        // Determine picker locations\n        switch(settings.control) {\n\n            case 'wheel':\n                // Set grid position\n                r = keepWithin(Math.ceil(hsb.s * 0.75), 0, grid.height() / 2);\n                phi = hsb.h * Math.PI / 180;\n                x = keepWithin(75 - Math.cos(phi) * r, 0, grid.width());\n                y = keepWithin(75 - Math.sin(phi) * r, 0, grid.height());\n                gridPicker.css({\n                    top: y + 'px',\n                    left: x + 'px'\n                });\n\n                // Set slider position\n                y = 150 - (hsb.b / (100 / grid.height()));\n                if( hex === '' ) y = 0;\n                sliderPicker.css('top', y + 'px');\n\n                // Update panel color\n                slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));\n                break;\n\n            case 'saturation':\n                // Set grid position\n                x = keepWithin((5 * hsb.h) / 12, 0, 150);\n                y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());\n                gridPicker.css({\n                    top: y + 'px',\n                    left: x + 'px'\n                });\n\n                // Set slider position\n                y = keepWithin(slider.height() - (hsb.s * (slider.height() / 100)), 0, slider.height());\n                sliderPicker.css('top', y + 'px');\n\n                // Update UI\n                slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: hsb.b }));\n                minicolors.find('.minicolors-grid-inner').css('opacity', hsb.s / 100);\n                break;\n\n            case 'brightness':\n                // Set grid position\n                x = keepWithin((5 * hsb.h) / 12, 0, 150);\n                y = keepWithin(grid.height() - Math.ceil(hsb.s / (100 / grid.height())), 0, grid.height());\n                gridPicker.css({\n                    top: y + 'px',\n                    left: x + 'px'\n                });\n\n                // Set slider position\n                y = keepWithin(slider.height() - (hsb.b * (slider.height() / 100)), 0, slider.height());\n                sliderPicker.css('top', y + 'px');\n\n                // Update UI\n                slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));\n                minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (hsb.b / 100));\n                break;\n\n            default:\n                // Set grid position\n                x = keepWithin(Math.ceil(hsb.s / (100 / grid.width())), 0, grid.width());\n                y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());\n                gridPicker.css({\n                    top: y + 'px',\n                    left: x + 'px'\n                });\n\n                // Set slider position\n                y = keepWithin(slider.height() - (hsb.h / (360 / slider.height())), 0, slider.height());\n                sliderPicker.css('top', y + 'px');\n\n                // Update panel color\n                grid.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: 100 }));\n                break;\n\n        }\n\n        // Fire change event, but only if minicolors is fully initialized\n        if( input.data('minicolors-initialized') ) {\n            doChange(input, value, opacity);\n        }\n\n    }\n\n    // Runs the change and changeDelay callbacks\n    function doChange(input, value, opacity) {\n\n        var settings = input.data('minicolors-settings'),\n            lastChange = input.data('minicolors-lastChange');\n\n        // Only run if it actually changed\n        if( !lastChange || lastChange.value !== value || lastChange.opacity !== opacity ) {\n\n            // Remember last-changed value\n            input.data('minicolors-lastChange', {\n                value: value,\n                opacity: opacity\n            });\n\n            // Fire change event\n            if( settings.change ) {\n                if( settings.changeDelay ) {\n                    // Call after a delay\n                    clearTimeout(input.data('minicolors-changeTimeout'));\n                    input.data('minicolors-changeTimeout', setTimeout( function() {\n                        settings.change.call(input.get(0), value, opacity);\n                    }, settings.changeDelay));\n                } else {\n                    // Call immediately\n                    settings.change.call(input.get(0), value, opacity);\n                }\n            }\n            input.trigger('change').trigger('input');\n        }\n\n    }\n\n    // Generates an RGB(A) object based on the input's value\n    function rgbObject(input) {\n        var hex = parseHex($(input).val(), true),\n            rgb = hex2rgb(hex),\n            opacity = $(input).attr('data-opacity');\n        if( !rgb ) return null;\n        if( opacity !== undefined ) $.extend(rgb, { a: parseFloat(opacity) });\n        return rgb;\n    }\n\n    // Generates an RGB(A) string based on the input's value\n    function rgbString(input, alpha) {\n        var hex = parseHex($(input).val(), true),\n            rgb = hex2rgb(hex),\n            opacity = $(input).attr('data-opacity');\n        if( !rgb ) return null;\n        if( opacity === undefined ) opacity = 1;\n        if( alpha ) {\n            return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat(opacity) + ')';\n        } else {\n            return 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';\n        }\n    }\n\n    // Converts to the letter case specified in settings\n    function convertCase(string, letterCase) {\n        return letterCase === 'uppercase' ? string.toUpperCase() : string.toLowerCase();\n    }\n\n    // Parses a string and returns a valid hex string when possible\n    function parseHex(string, expand) {\n        string = string.replace(/^#/g, '');\n        if( !string.match(/^[A-F0-9]{3,6}/ig) ) return '';\n        if( string.length !== 3 && string.length !== 6 ) return '';\n        if( string.length === 3 && expand ) {\n            string = string[0] + string[0] + string[1] + string[1] + string[2] + string[2];\n        }\n        return '#' + string;\n    }\n\n    // Parses a string and returns a valid RGB(A) string when possible\n    function parseRgb(string, obj) {\n\n        var values = string.replace(/[^\\d,.]/g, ''),\n            rgba = values.split(','),\n            output;\n\n        rgba[0] = keepWithin(parseInt(rgba[0], 10), 0, 255);\n        rgba[1] = keepWithin(parseInt(rgba[1], 10), 0, 255);\n        rgba[2] = keepWithin(parseInt(rgba[2], 10), 0, 255);\n        if( rgba[3] ) {\n            rgba[3] = keepWithin(parseFloat(rgba[3], 10), 0, 1);\n        }\n\n        // Return RGBA object\n        if( obj ) {\n            return {\n                r: rgba[0],\n                g: rgba[1],\n                b: rgba[2],\n                a: rgba[3] ? rgba[3] : null\n            };\n        }\n\n        // Return RGBA string\n        if( typeof(rgba[3]) !== 'undefined' && rgba[3] <= 1 ) {\n            return 'rgba(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ', ' + rgba[3] + ')';\n        } else {\n            return 'rgb(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ')';\n        }\n\n    }\n\n    // Parses a string and returns a valid color string when possible\n    function parseInput(string, expand) {\n        if( isRgb(string) ) {\n            // Returns a valid rgb(a) string\n            return parseRgb(string);\n        } else {\n            return parseHex(string, expand);\n        }\n    }\n\n    // Keeps value within min and max\n    function keepWithin(value, min, max) {\n        if( value < min ) value = min;\n        if( value > max ) value = max;\n        return value;\n    }\n\n    // Checks if a string is a valid RGB(A) string\n    function isRgb(string) {\n        rgb = string.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n        return (rgb && rgb.length === 4) ? true : false;\n    }\n\n    // Function to get alpha from a RGB(A) string\n    function getAlpha(rgba) {\n        rgba = rgba.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+(\\.\\d{1,2})?|\\.\\d{1,2})[\\s+]?/i);\n        return (rgba && rgba.length === 6) ? rgba[4] : '1';\n    }\n\n   // Converts an HSB object to an RGB object\n    function hsb2rgb(hsb) {\n        var rgb = {};\n        var h = Math.round(hsb.h);\n        var s = Math.round(hsb.s * 255 / 100);\n        var v = Math.round(hsb.b * 255 / 100);\n        if(s === 0) {\n            rgb.r = rgb.g = rgb.b = v;\n        } else {\n            var t1 = v;\n            var t2 = (255 - s) * v / 255;\n            var t3 = (t1 - t2) * (h % 60) / 60;\n            if( h === 360 ) h = 0;\n            if( h < 60 ) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3; }\n            else if( h < 120 ) {rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3; }\n            else if( h < 180 ) {rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3; }\n            else if( h < 240 ) {rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3; }\n            else if( h < 300 ) {rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3; }\n            else if( h < 360 ) {rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3; }\n            else { rgb.r = 0; rgb.g = 0; rgb.b = 0; }\n        }\n        return {\n            r: Math.round(rgb.r),\n            g: Math.round(rgb.g),\n            b: Math.round(rgb.b)\n        };\n    }\n\n    // Converts an RGB string to a hex string\n    function rgbString2hex(rgb){\n        rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n        return (rgb && rgb.length === 4) ? '#' +\n        ('0' + parseInt(rgb[1],10).toString(16)).slice(-2) +\n        ('0' + parseInt(rgb[2],10).toString(16)).slice(-2) +\n        ('0' + parseInt(rgb[3],10).toString(16)).slice(-2) : '';\n    }\n\n    // Converts an RGB object to a hex string\n    function rgb2hex(rgb) {\n        var hex = [\n            rgb.r.toString(16),\n            rgb.g.toString(16),\n            rgb.b.toString(16)\n        ];\n        $.each(hex, function(nr, val) {\n            if (val.length === 1) hex[nr] = '0' + val;\n        });\n        return '#' + hex.join('');\n    }\n\n    // Converts an HSB object to a hex string\n    function hsb2hex(hsb) {\n        return rgb2hex(hsb2rgb(hsb));\n    }\n\n    // Converts a hex string to an HSB object\n    function hex2hsb(hex) {\n        var hsb = rgb2hsb(hex2rgb(hex));\n        if( hsb.s === 0 ) hsb.h = 360;\n        return hsb;\n    }\n\n    // Converts an RGB object to an HSB object\n    function rgb2hsb(rgb) {\n        var hsb = { h: 0, s: 0, b: 0 };\n        var min = Math.min(rgb.r, rgb.g, rgb.b);\n        var max = Math.max(rgb.r, rgb.g, rgb.b);\n        var delta = max - min;\n        hsb.b = max;\n        hsb.s = max !== 0 ? 255 * delta / max : 0;\n        if( hsb.s !== 0 ) {\n            if( rgb.r === max ) {\n                hsb.h = (rgb.g - rgb.b) / delta;\n            } else if( rgb.g === max ) {\n                hsb.h = 2 + (rgb.b - rgb.r) / delta;\n            } else {\n                hsb.h = 4 + (rgb.r - rgb.g) / delta;\n            }\n        } else {\n            hsb.h = -1;\n        }\n        hsb.h *= 60;\n        if( hsb.h < 0 ) {\n            hsb.h += 360;\n        }\n        hsb.s *= 100/255;\n        hsb.b *= 100/255;\n        return hsb;\n    }\n\n    // Converts a hex string to an RGB object\n    function hex2rgb(hex) {\n        hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);\n        return {\n            /* jshint ignore:start */\n            r: hex >> 16,\n            g: (hex & 0x00FF00) >> 8,\n            b: (hex & 0x0000FF)\n            /* jshint ignore:end */\n        };\n    }\n\n    // Handle events\n    $(document)\n        // Hide on clicks outside of the control\n        .on('mousedown.minicolors touchstart.minicolors', function(event) {\n            if( !$(event.target).parents().add(event.target).hasClass('minicolors') ) {\n                hide();\n            }\n        })\n        // Start moving\n        .on('mousedown.minicolors touchstart.minicolors', '.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider', function(event) {\n            var target = $(this);\n            event.preventDefault();\n            $(document).data('minicolors-target', target);\n            move(target, event, true);\n        })\n        // Move pickers\n        .on('mousemove.minicolors touchmove.minicolors', function(event) {\n            var target = $(document).data('minicolors-target');\n            if( target ) move(target, event);\n        })\n        // Stop moving\n        .on('mouseup.minicolors touchend.minicolors', function() {\n            $(this).removeData('minicolors-target');\n        })\n        // Show panel when swatch is clicked\n        .on('mousedown.minicolors touchstart.minicolors', '.minicolors-swatch', function(event) {\n            var input = $(this).parent().find('.minicolors-input');\n            event.preventDefault();\n            show(input);\n        })\n        // Show on focus\n        .on('focus.minicolors', '.minicolors-input', function() {\n            var input = $(this);\n            if( !input.data('minicolors-initialized') ) return;\n            show(input);\n        })\n        // Update value on blur\n        .on('blur.minicolors', '.minicolors-input', function() {\n            var input = $(this),\n                keywords = input.attr('data-keywords'),\n                settings = input.data('minicolors-settings'),\n                hex,\n                rgba,\n                swatchOpacity;\n\n            if( !input.data('minicolors-initialized') ) return;\n\n            // Get array of lowercase keywords\n            keywords = !keywords ? [] : $.map(keywords.split(','), function(a) {\n                return $.trim(a.toLowerCase());\n            });\n\n            // Set color string\n            if( input.val() !== '' && $.inArray(input.val().toLowerCase(), keywords) > -1 ) {\n                value = input.val();\n            } else {\n                // Get RGBA values for easy conversion\n                if( isRgb(input.val()) ) {\n                    rgba = parseRgb(input.val(), true);\n                } else {\n                    hex = parseHex(input.val(), true);\n                    rgba = hex ? hex2rgb(hex) : null;\n                }\n\n                // Convert to format\n                if( rgba === null ) {\n                    value = settings.defaultValue;\n                } else if( settings.format === 'rgb' ) {\n                    value = settings.opacity ?\n                        parseRgb('rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ',' + input.attr('data-opacity') + ')') :\n                        parseRgb('rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')');\n                } else {\n                    value = rgb2hex(rgba);\n                }\n            }\n\n            // Update swatch opacity\n            swatchOpacity = settings.opacity ? input.attr('data-opacity') : 1;\n            if( value.toLowerCase() === 'transparent' ) swatchOpacity = 0;\n            input\n                .closest('.minicolors')\n                .find('.minicolors-swatch > span')\n                .css('opacity', swatchOpacity);\n\n            // Set input value\n            input.val(value);\n\n            // Is it blank?\n            if( input.val() === '' ) input.val(parseInput(settings.defaultValue, true));\n\n            // Adjust case\n            input.val( convertCase(input.val(), settings.letterCase) );\n\n        })\n        // Handle keypresses\n        .on('keydown.minicolors', '.minicolors-input', function(event) {\n            var input = $(this);\n            if( !input.data('minicolors-initialized') ) return;\n            switch(event.keyCode) {\n                case 9: // tab\n                    hide();\n                    break;\n                case 13: // enter\n                case 27: // esc\n                    hide();\n                    input.blur();\n                    break;\n            }\n        })\n        // Update on keyup\n        .on('keyup.minicolors', '.minicolors-input', function() {\n            var input = $(this);\n            if( !input.data('minicolors-initialized') ) return;\n            updateFromInput(input, true);\n        })\n        // Update on paste\n        .on('paste.minicolors', '.minicolors-input', function() {\n            var input = $(this);\n            if( !input.data('minicolors-initialized') ) return;\n            setTimeout( function() {\n                updateFromInput(input, true);\n            }, 1);\n        });\n\n}));\n",";( function(window) {\n    'use strict';\n\n    /**\n     * Meter constructor\n     *\n     * @param DOM Object el\n     * @param string field\n     */\n    function Meter(el, field, meter) {\n        this.el = el;\n\n        field = field || 'input[type=\"password\"]';\n        meter = meter || '.strength-meter > div';\n\n        this.field = this.el.find(field);\n        this.meter = this.el.find(meter);\n        this._init();\n    }\n\n    // Meter prototype\n    Meter.prototype = {\n        // Initializes meter\n        _init : function() {\n            this.characters = 0;\n            this.capitalletters = 0;\n            this.lowerletters = 0;\n            this.number = 0;\n            this.special = 0;\n\n            this.upperCase = new RegExp('[A-Z]');\n            this.lowerCase = new RegExp('[a-z]');\n            this.numbers = new RegExp('[0-9]');\n            this.specialchars = new RegExp('([!,%,&,@,#,$,^,*,?,_,~,/])');\n\n            var self = this;\n\n            this.field.on('keyup keydown', function() {\n                self._checkStrength($(this).val());\n            });\n        },\n        // Sets meter percentage\n        _setPercentage : function(percentage) {\n            this.meter.css({ 'width' : percentage + '%' });\n        },\n        // Sets meter class\n        _setClass : function(total) {\n            if(total <= 1) {\n                this.meter.removeClass();\n                this.meter.addClass('veryweak');\n            } else if(total === 2) {\n                this.meter.removeClass();\n                this.meter.addClass('weak');\n            } else if(total === 3) {\n                this.meter.removeClass();\n                this.meter.addClass('medium');\n            } else {\n                this.meter.removeClass();\n                this.meter.addClass('strong');\n            }\n        },\n        // Checks strength\n        _checkStrength : function(value) {\n            if (value.length >= 8) { this.characters = 1; } else { this.characters = 0; }\n            if (value.match(this.upperCase)) { this.capitalletters = 1; } else { this.capitalletters = 0; }\n            if (value.match(this.lowerCase)) { this.lowerletters = 1; }  else { this.lowerletters = 0; }\n            if (value.match(this.numbers)) { this.number = 1; }  else { this.number = 0; }\n            if (value.match(this.specialchars)) { this.special = 1; }  else { this.special = 0; }\n\n\n            var total = this._getTotal();\n            var percentage = this._getPercentage(5, total);\n\n            this._setPercentage(percentage);\n\n            this._setClass(total);\n        },\n        // Percentage helper\n        _getPercentage : function(a, b) {\n            return ((b / a) * 100);\n        },\n        // Gets total\n        _getTotal : function() {\n            return this.characters + this.capitalletters + this.lowerletters + this.number + this.special;\n        }\n    };\n\n    // Register meter to window namespace\n    window.Meter = Meter;\n\n})(window);",";( function(window) {\n    'use strict';\n\n    // Constructor\n    function Slug(el) {\n        this.el = el;\n\n        this._init();\n    }\n\n    // Slug prototype\n    Slug.prototype = {\n        // Initialize\n        _init : function() {\n            this.input = this.el.find('input[type=\"text\"]');\n\n            var follow = typeof this.input.data('follows') !== 'undefined' ?\n                this.input.data('follows') :\n                '#title';\n\n            this.follow = $(follow);\n\n            this.dirty = (this.input.val() !== '') ? true : false;\n\n            this._initEvents();\n        },\n        _initEvents : function() {\n            var self = this;\n\n            this.input.on('keyup', function() {\n                self.dirty = true;\n            });\n\n            this.follow.on('keyup', function() {\n                if(!self.dirty) { self._setSlug(); }\n            });\n\n            this.input.on('blur', function() {\n                if(self.input.val() === '') {\n                    self.changed = false;\n                    self._setSlug();\n                }\n            });\n        },\n        // Set slug\n        _setSlug : function() {\n            var slug = this._slugify(this.follow.val());\n\n            this.input.val(slug);\n        },\n        _slugify : function(str) {\n            str = str.replace(/^\\s+|\\s+$/g, '').toLowerCase();\n\n            // Remove accents\n            var from = \"àáäâèéëêıìíïîòóöôùúüûñçğş·/_,:;\", to = \"aaaaeeeeiiiiioooouuuuncgs------\";\n\n            for(var i = 0, l = from.length; i < l; i++) {\n                str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\n            }\n\n            return str.replace(/[^a-z0-9 -]/g, '') // Remove invalid chars\n                .replace(/\\s+/g, '-') // Collapse whitespace and replace by -\n                .replace(/-+/g, '-'); // Collapse dashes\n        }\n    };\n\n    window.Slug = Slug;\n\n}) (window);","// Strict definitions\n;(function (window) {\n    'use strict';\n\n    // Tag field constructor\n    function TagLegacy(el) {\n        this.el = el;\n\n        this._init();\n    }\n\n    // Tag prototype\n    TagLegacy.prototype = {\n        // Initialize\n        _init: function () {\n            this.list = this.el.find('ul.taglist');\n            this.inputItem = this.el.find('div.tag-input');\n            this.input = this.inputItem.find('input[name=\"_tag\"]');\n            this.valueInput = this.el.find('input[type=\"hidden\"]');\n\n            this.tags = [];\n\n            this._extractValue();\n\n            this._initEvents();\n        },\n        // Initialize events\n        _initEvents: function () {\n            var self = this;\n\n            this.input.bind('keydown', function (e) {\n                var input = $(this);\n\n                if (e.which === 27) {\n                    e.stopPropagation();\n\n                    if (input.val() === '') {\n                        input.blur();\n                    } else {\n                        input.val('');\n                    }\n\n                } else if (e.which === 9 || e.which === 13) {\n                    e.preventDefault();\n\n                    var val = input.val().trim();\n\n                    if (val !== '') {\n                        if (self._addTag(input.val())) {\n                            input.val('');\n                        }\n                    }\n                }\n            });\n\n            // Remove buttons\n            this.list.on('click', '.icon-cancel', function () {\n                self._removeTag($(this));\n            });\n        },\n        // Extracts the current value, generates the list\n        _extractValue: function () {\n            var values = this.valueInput.val().trim();\n\n            if (values !== '') {\n                values = values.split(',');\n\n                for (var i = 0; i < values.length; i++) {\n                    this._addTag(values[i]);\n                }\n            }\n\n            this._setListClass(this.tags);\n        },\n        // Removes an item\n        _removeTag: function (tag) {\n            var parent = tag.parents('.tag');\n\n            delete this.tags[parent.data('id')];\n\n            parent.remove();\n\n            this._setValue();\n        },\n        // Adds an item\n        _addTag: function (str) {\n            var i = this.tags.indexOf(str);\n\n            if (i > -1) {\n                var duplicate = this.list.find('li[data-id=\"' + i + '\"]');\n\n                duplicate.addClass('flash');\n\n                setTimeout(function () {\n                    duplicate.removeClass('flash');\n                }, 100);\n\n                return false;\n            } else {\n                this.tags.push(str);\n\n                i = this.tags.indexOf(str);\n\n                this._createTag(i, str);\n\n                this._setValue();\n\n                return true;\n            }\n        },\n        // Creates a tag and appends to list\n        _createTag: function (id, str) {\n            $('<li class=\"tag\" data-id=\"' + id + '\">' + html_entities(str) + '<i class=\"icon-cancel\"></i></li>').appendTo(this.list);\n        },\n        // Sets the value input\n        _setValue: function () {\n            var clean = $.grep(this.tags, function (n) {\n                return (n);\n            });\n\n            this.valueInput.val(clean.join(','));\n\n            this._setListClass(clean);\n        },\n        // Sets the list class\n        _setListClass: function (tags) {\n            if (tags.length === 0) {\n                this.list.addClass('empty');\n            } else {\n                this.list.removeClass('empty');\n            }\n        }\n    };\n\n    // Register to window namespace\n    window.TagLegacy = TagLegacy;\n\n})(window);",";(function (window) {\n    'use strict';\n\n    // Uploader Constructor\n    function Uploader(zone, options) {\n        this._init(zone, options);\n    }\n\n    // Uploader\n    Uploader.prototype = {\n        /**\n         * Constructor\n         *\n         * @param DOM Object\n         * @param array\n         */\n        _init: function (self, options) {\n            this.zone = self;\n\n            var defaults = {\n                selectButton: '#dropzone-select-button',\n                uploadInput: '#dropzone-file',\n                outputList: '#upload-list',\n                indicator: null,\n                enabled: true,\n                append: true\n            };\n\n            this.options = $.extend(defaults, options);\n            this.action = $(this.zone).attr('action');\n\n            this.fileQueue = [];\n            this.statusIndicators = [];\n            this.current = 0;\n            this.inProcess = false;\n\n            this.maxsize = this.zone.data('maxsize');\n\n            this._initEvents();\n        },\n        /**\n         * Binds events\n         */\n        _initEvents: function () {\n            var self = this;\n\n            // Class binds\n            this.zone.bind(\"dragenter, dragover\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                $(this).addClass('dragenter');\n            });\n\n            this.zone.bind(\"dragleave\", function () {\n                $(this).removeClass('dragenter');\n            });\n\n            // Disable window drop\n            $(window).bind('drop', function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Bind file drop\n            this.zone.bind(\"drop\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                self.queue(e.originalEvent.dataTransfer.files);\n\n                $(this).removeClass('dragenter');\n            });\n\n            // Bind input change\n            $(this.options.uploadInput).bind(\"change\", function () {\n                self.queue($(this)[0].files);\n            });\n\n            // Bind optional select button if exists\n            if (this.options.selectButton !== false) {\n                $(this.options.selectButton).bind(\"click\", function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    $(self.options.uploadInput).click();\n                });\n            }\n        },\n        /**\n         * Adds new files to the queue\n         *\n         * @param array\n         */\n        queue: function (files) {\n            if (!this.options.enabled) {\n                return false;\n            }\n\n            for (var i = 0; i < files.length; i++) {\n                if (files[i].size < this.maxsize) {\n\n                    var fd = new FormData();\n                    fd.append('file', files[i]);\n\n                    this.fileQueue.push(fd);\n\n                    // Escape the file name in order to prevent XSS\n                    var indicator = this._createIndicator(html_entities(files[i].name), files[i].size);\n\n                    this.statusIndicators.push(indicator);\n\n                    if (this.options.outputList !== false) {\n                        if (this.options.append === true) {\n                            $(this.options.outputList).append(indicator.parent);\n                        } else {\n                            $(this.options.outputList).prepend(indicator.parent);\n                        }\n\n                    }\n                }\n            }\n\n            if (this.inProcess === false) {\n                this._upload();\n            }\n        },\n        /**\n         * Creates an upload indicator\n         */\n        _createIndicator: function(name, size)\n        {\n            var className = (!this.options.indicator) ? 'Indicator' : this.options.indicator;\n\n            className = window[className];\n\n            return new className(name, size);\n        },\n        /**\n         * Iterates through queue and uploads files\n         */\n        _upload: function () {\n            var self = this;\n\n            if (this.current < this.fileQueue.length) {\n                this.inProcess = true;\n\n                var fd = this.fileQueue[this.current],\n                    indicator = this.statusIndicators[this.current];\n\n                $.ajax({\n                        xhr: function () {\n                            var xhrobj = $.ajaxSettings.xhr();\n\n                            if (xhrobj.upload) {\n                                xhrobj.upload.addEventListener('progress', function (e) {\n                                    indicator.setProgress(loaded(e));\n                                });\n                            }\n\n                            return xhrobj;\n                        },\n\n                        url: self.action,\n                        type: 'POST',\n                        contentType: false,\n                        processData: false,\n                        cache: false,\n                        data: fd,\n\n                        success: function (data) {\n                            indicator.complete(data);\n                        }\n                    })\n                    .always(function () {\n                        self.current++;\n                        self._upload();\n                    });\n\n            } else {\n                this.inProcess = false;\n            }\n        }\n    };\n\n    window.Uploader = Uploader;\n\n\n    // Indicator Constructor\n    function Indicator(name, size) {\n        this._init(name, size);\n    }\n\n    // Indicator\n    Indicator.prototype = {\n        /**\n         * Constructor\n         *\n         * @param string\n         * @param int\n         */\n        _init: function (name, size) {\n            // Parent\n            this.parent = $('<li class=\"material-light\"></li>');\n            // Progress bar\n            this.progressContainer = $('<div class=\"upload-progress-container\"></div>').appendTo(this.parent);\n            this.progressBar = $('<div class=\"upload-progress-bar\"></div>').appendTo(this.progressContainer);\n\n            // Indicator wrapper\n            this.messageWrapper = $('<div class=\"upload-message-wrapper\"></div>').appendTo(this.parent);\n\n            // Icon\n            this.thumbnail = $('<span class=\"upload-thumbnail\"></span>').appendTo(this.messageWrapper);\n            // Container\n            this.container = $('<p></p>').appendTo(this.messageWrapper);\n            // File name\n            this.filename = $('<span class=\"upload-text\">' + name + '</span>').appendTo(this.container);\n            // File size / Message\n            this.message = $('<span class=\"upload-text muted\">' + readable_size(size) + '</span>').appendTo(this.container);\n\n            // Clone filename and message\n            this.container.clone().appendTo(this.progressContainer);\n        },\n        /**\n         * Set the progressbar width\n         *\n         * @param int\n         */\n        setProgress: function (percent) {\n            this.progressBar.width(percent.toString() + \"%\");\n        },\n        /**\n         * Takes action on the completed upload\n         *\n         * @param json\n         */\n        complete: function (reply) {\n            this.setProgress(100);\n\n            if (reply.type === 'success') {\n                this._success(reply.response);\n            } else if (reply.type === 'error') {\n                this._error(reply);\n            }\n        },\n        /**\n         * Makes the UI changes when upload is completed\n         *\n         * @param json string\n         */\n        _success: function (data) {\n            $(this.parent).addClass('complete');\n\n            this.thumbnail.html(data.thumbnail);\n\n            this.message.html(data.mimetype + ' | ' + this.message.text());\n        },\n        /**\n         * Makes the UI changes when upload returns error\n         *\n         * @param json string\n         */\n        _error: function (data) {\n            $(this.parent).addClass('error');\n\n            $(this.thumbnail).html('<i class=\"icon-cancel\"></i>');\n\n            $(this.message).html(data.response);\n        }\n    };\n\n    // Register indicator to the window namespace\n    window.Indicator = Indicator;\n\n})(window);",";(function (window) {\n    'use strict';\n\n    /**\n     * Library constructor\n     *\n     * @param DOM Object\n     */\n    function Library(el) {\n        this.container = el;\n\n        this._init();\n    }\n\n    // Prototype\n    Library.prototype = {\n        // Initialize\n        _init: function () {\n            this.retrieveURL = this.container.data('retrieveurl');\n\n            this.modal = this.container.find('#library-modal');\n            this.scroller = this.modal.find('#library-modal-columns');\n            this.mediaList = $('#library-modal-media-list');\n\n            this.searchForm = this.modal.find('#library-modal-search');\n            this.noResults = this.modal.find('#library-modal-noresults');\n            this.disabler = this.modal.find('#library-modal-disabler');\n\n            this.mediaDetails = this.modal.find('#library-modal-media-detail');\n            this.gallerySortable = this.modal.find('#library-modal-gallery-sortable');\n            this.numSelected = this.modal.find('#library-modal-gallery-selected > span');\n\n            this.clearButton = this.modal.find('#library-modal-clear');\n            this.removeButton = this.modal.find('#library-modal-remove');\n            this.insertButton = this.modal.find('#library-modal-insert');\n            this.closeButton = this.modal.find('#library-modal-close');\n\n            this.dropzone = this.container.find('#library-modal-dropzone');\n\n            this.controller = null;\n            this.isOpen = false;\n            this.isRetrieved = false;\n            this.mode = null;\n            this.masterFilter = null;\n            this.lastValue = null;\n            this.uploadIndicators = [];\n            this.controllerDirty = false;\n\n            // Create dialog\n            this.dialog = new Modal($('#library-modal-container'));\n\n            // Create uploader\n            this.uploader = new Uploader($('#library-modal-dropzone'), {\n                outputList: this.mediaList,\n                enabled: false,\n                append: false,\n                indicator: 'LibraryIndicator'\n            });\n\n            this._disableList();\n\n            this._initEvents();\n        },\n        // Initialize events\n        _initEvents: function () {\n            // Cache self\n            var self = this;\n\n            // Scrollers\n            this.scroller.find('.library-modal-scroll-button').on('click', function () {\n                // Check direction\n                if ($(this).hasClass('right')) {\n                    self.scroller.addClass('scrolled');\n                } else if ($(this).hasClass('left')) {\n                    self.scroller.removeClass('scrolled');\n                }\n            });\n\n            // Stop propagation for the library-modal\n            this.modal.on('click', function (e) {\n                e.stopPropagation();\n            });\n\n            // Clear button\n            this.clearButton.on('click', function (e) {\n                self._clearGallery();\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Remove button\n            this.removeButton.on('click', function () {\n                self._deselectDocument();\n\n                self.controller.setValue(null);\n\n                self.close();\n            });\n\n            // Search\n            this.searchForm.on('submit', function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                if (!$(this).hasClass('disabled')) {\n                    var search = $(this).find('input[name=\"q\"]');\n\n                    var keywords = search.val();\n\n                    self._search(keywords);\n                }\n            });\n\n            // Search input keypress\n            this.searchForm.find('input[type=\"search\"]').bind('keydown', function (e) {\n                if (e.keyCode === 27) {\n                    e.stopPropagation();\n                    if ($(this).val() === '') {\n                        $(this).blur();\n                    } else {\n                        self._search('');\n                    }\n                }\n            });\n\n            // Sortable\n            this.gallerySortable.sortable({\n                cursor: 'move',\n                tolerance: 'pointer',\n                placeholder: 'placeholder',\n                opacity: 0.7,\n                delay: 50,\n                scroll: false\n            }).disableSelection();\n\n            // Sortable remove\n            this.gallerySortable.on('click', '.library-modal-sortable-remove', function (e) {\n                var parent = $(this).parent();\n\n                self._deselectGallery($('#md_' + parent.data('id')));\n\n                parent.remove();\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Dragenter, dragover\n            this.container.on(\"dragenter, dragover\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                self.dropzone.addClass('dragenter');\n            });\n\n            // Dragleave\n            this.dropzone.on(\"dragleave\", function () {\n                $(this).removeClass('dragenter');\n            });\n\n            // Call upload handler\n            this.dropzone.on(\"drop\", function (e) {\n                e.preventDefault();\n\n                $(this).removeClass('dragenter');\n            });\n\n            // Close button\n            this.closeButton.on(\"click\", function () {\n                self.close();\n            });\n        },\n        // Initialize\n        run: function (controller) {\n            if (!this.isRetrieved) {\n                // We do not store controller here since we don't want\n                // conflicts when this mode runs again after retrieval\n                this._setMode(controller.type);\n\n                this._reset();\n\n                this._retrieve(controller);\n            } else {\n                if (this.controller !== controller) {\n                    this.controller = controller;\n\n                    this._setMode(controller.type);\n\n                    this.controllerDirty = true;\n\n                    this._reset();\n                }\n\n                this._initByMode();\n            }\n\n            this.open();\n        },\n        // Displays by controller value/options\n        _initByMode: function () {\n            if (this.mode === 'gallery') {\n                this._initGallery();\n            } else {\n                this._initDocument();\n            }\n        },\n        // Init gallery\n        _initGallery: function () {\n            // Do this bit if the controller is not the same\n            if (this.controllerDirty === true) {\n                var self = this;\n\n                this._setMasterFilter('image');\n\n                this.mediaList.unbind('click').on('click', 'li', function () {\n                    self._selectForGallery($(this));\n                });\n\n                this.insertButton.unbind('click').on('click', function () {\n                    self.controller.setValue(self._parseForGallery());\n\n                    self.close();\n                });\n\n                this.controllerDirty = false;\n            }\n\n            var mediaIds = this.controller.getValue();\n\n            // If the last value has changed reinit\n            if (this.isRetrieved && this.lastValue !== mediaIds) {\n                this.lastValue = mediaIds;\n\n                this._clearGallery();\n\n                // Take action if not empty\n                if (mediaIds !== '' && mediaIds.length > 0) {\n                    mediaIds = JSON.parse(mediaIds);\n\n                    for (var i = mediaIds.length - 1; i >= 0; i--) {\n                        var media = $('#md_' + mediaIds[i]);\n\n                        if (media.length > 0) {\n                            this._selectGallery(media);\n                        }\n                    }\n                }\n\n                this._recalculateSelected();\n            }\n        },\n        // Init document\n        _initDocument: function () {\n            // Do this bit if the controller is not the same\n            if (this.controllerDirty === true) {\n                var self = this;\n\n                if (typeof this.controller.filter !== 'undefined') {\n                    this._setMasterFilter(this.controller.filter);\n                }\n\n                this.mediaList.unbind('click').on('click', 'li', function () {\n                    self._selectForDocument($(this));\n                });\n\n                this.insertButton.unbind('click').on('click', function () {\n                    self.controller.setValue(self._parseForDocument());\n\n                    self.close();\n                });\n\n                this.controllerDirty = false;\n            }\n\n            var mediaId = this.controller.getValue();\n\n            // If the last value has changed reinit\n            if (this.isRetrieved && this.lastValue !== mediaId) {\n                this.lastValue = mediaId;\n\n                var media = $('#md_' + mediaId);\n\n                if (media.length > 0) {\n                    this._selectDocument(media);\n                } else {\n                    this._deselectDocument();\n                }\n            }\n        },\n        // Selects media depending on the mode\n        selectMediaById: function (id) {\n            var media = $('#md_' + id);\n\n            if (media.length > 0) {\n                // Select depending on mode\n                if (this.mode === 'gallery') {\n                    this._selectForGallery(media);\n                } else {\n                    this._selectForDocument(media);\n                }\n            }\n        },\n        // Select media\n        _selectForDocument: function (media) {\n            // Return if it has indicator\n            if (media.hasClass('indicator')) {\n                return false;\n            }\n\n            // Take action depending on the selected condition\n            if (media.hasClass('selected')) {\n                this._deselectDocument();\n            } else {\n                this._selectDocument(media);\n            }\n        },\n        // Selects document\n        _selectDocument: function (media) {\n            this.mediaList.children('li.selected').removeClass('selected');\n            media.addClass('selected');\n            this.mediaDetails.addClass('selected');\n\n            this.mediaDetails.data('id', media.data('id'));\n\n            var tag = this.mediaDetails.children('.library-modal-media-tag'),\n                name = tag.find('.media-name'),\n                detail = tag.find('.media-detail'),\n                thumbnail = tag.find('.media-thumbnail');\n\n            name.text(media.data('name'));\n\n            if (isNaN(media.data('size')) || media.data('size') == '0') {\n                var details = media.data('mimetype');\n            } else {\n                var details = media.data('mimetype') + ' | ' + readable_size(media.data('size'));\n            }\n\n            detail.text(details);\n\n            thumbnail.html(media.find('.document-thumbnail').clone());\n        },\n        // Deselects document\n        _deselectDocument: function () {\n            this.mediaList.children('li.selected').removeClass('selected');\n            this.mediaDetails.removeClass('selected');\n\n            this.mediaDetails.data('id', '');\n        },\n        // Select media for gallery\n        _selectForGallery: function (media) {\n            if (media.hasClass('indicator') || media.hasClass('filtered')) {\n                return false;\n            }\n\n            if (media.hasClass('selected')) {\n                this._deselectGallery(media);\n            } else {\n                this._selectGallery(media);\n            }\n\n            this._recalculateSelected();\n        },\n        // Selects media for gallery\n        _selectGallery: function (media) {\n            media.addClass('selected');\n\n            var thumbnail = $('<li data-id=\"' + media.data('id') + '\" id=\"gl_' + media.data('id') + '\"></li>');\n\n            $('<img src=\"' + media.find('img').attr('src') + '\">').appendTo(thumbnail);\n\n            $('<i class=\"icon-cancel library-modal-sortable-remove\"></i>').appendTo(thumbnail);\n\n            this.gallerySortable.prepend(thumbnail);\n        },\n        // Deselects media for gallery\n        _deselectGallery: function (media) {\n            media.removeClass('selected');\n\n            this.gallerySortable.find('#gl_' + media.data('id')).remove();\n\n            this._recalculateSelected();\n        },\n        _clearGallery: function () {\n            this.mediaList.children('li.selected').removeClass('selected');\n\n            this.gallerySortable.empty();\n\n            this.numSelected.text(0);\n        },\n        // Recalculates the number of selected media\n        _recalculateSelected: function () {\n            var selected = this.gallerySortable.children('li').length;\n\n            this.numSelected.text(selected);\n        },\n        // Parse media\n        _parseMedia: function (id) {\n            var media = $('#md_' + id);\n\n            if (media.length > 0) {\n                return {\n                    'id': id,\n                    'name': media.data('name'),\n                    'thumbnail': media.find('.document-thumbnail').children('img,i').clone()\n                };\n            } else {\n                return null;\n            }\n        },\n        // Parse for document\n        _parseForDocument: function () {\n            var id = this.mediaDetails.data('id');\n\n            return this._parseMedia(id);\n        },\n        // Parse for gallery\n        _parseForGallery: function () {\n            var array = [];\n\n            var gallery = this.gallerySortable.children('li');\n\n            for (var i = 0; i < gallery.length; i++) {\n                var id = gallery.eq(i).data('id');\n                // Push into array\n                array.push(this._parseMedia(id));\n            }\n\n            return array;\n        },\n        // Open\n        open: function () {\n            this.dialog.openModal();\n        },\n        // Open\n        close: function () {\n            this.dialog.closeModal();\n        },\n        _setMode: function (mode) {\n            this.mode = mode;\n\n            this.container.removeClass('library-modal-mode-gallery library-modal-mode-document');\n\n            this.container.addClass('library-modal-mode-' + mode);\n        },\n        // Sets the master filter\n        _setMasterFilter: function (key) {\n            this.masterFilter = key;\n\n            this._filter(key);\n        },\n        // Refilter (useful when new uploaded files arrive)\n        refilter: function () {\n            this._filter(\n                this.masterFilter\n            );\n        },\n        // Resets library modal\n        _reset: function () {\n            this.masterFilter = null;\n\n            this._deselectDocument();\n\n            this._clearGallery();\n\n            this.mediaList.children('li').removeClass();\n        },\n        // Retrieves the media\n        _retrieve: function (controller) {\n            var self = this;\n\n            $.getJSON(this.retrieveURL, function (data) {\n                self._populateList(data);\n\n                self.isRetrieved = true;\n\n                self._enableList();\n\n                self._enableUploader();\n\n                self.run(controller);\n            });\n        },\n        // Populates the media list\n        _populateList: function (data) {\n            for (var i = 0; i < data.length; i++) {\n                var media = data[i];\n\n                this.mediaList.prepend(this.createMediaThumbnail(media));\n            }\n        },\n        createMediaThumbnail: function (media) {\n            var thumbnail = $('<li data-id=\"' + media.id + '\" ' +\n                'id=\"md_' + media.id + '\" data-name=\"' + html_entities(media.name) + '\" ' +\n                'data-flag=\"' + media.type + '\" data-size=\"' + media.size + '\" ' +\n                'data-mimetype=\"' + media.mimetype + '\">');\n\n            $('<div class=\"document-thumbnail\">' + media.thumbnail + '</div>').appendTo(thumbnail);\n\n            $('<p>' + html_entities(media.name) + '</p>').appendTo(thumbnail);\n\n            $('<i class=\"icon-check\"></i>').appendTo(thumbnail);\n\n            return thumbnail;\n        },\n        // Enables list\n        _enableList: function () {\n            this.disabler.removeClass('active');\n\n            this.searchForm.removeClass('disabled');\n        },\n        // Disable list\n        _disableList: function () {\n            this.disabler.addClass('active');\n\n            this.searchForm.addClass('disabled');\n        },\n        // Filter items by key\n        _filter: function (key) {\n            if (!key || key === 'all') {\n                this.mediaList.children('li').removeClass('filtered');\n            } else {\n                this.mediaList.children('li').addClass('filtered');\n                this.mediaList.children('li[data-flag=\"' + key + '\"]').removeClass('filtered');\n            }\n\n            this._anyResults();\n        },\n        // Makes a search\n        _search: function (keywords) {\n            if (keywords.trim() === \"\") {\n                this.mediaList.children('li').removeClass('searched');\n\n                this._anyResults();\n            } else {\n                var self = this;\n\n                this._yesResults();\n\n                var formData = new FormData();\n                formData.append('q', keywords);\n\n                this.mediaList.children('li').addClass('searched');\n\n                this._disableList();\n\n                $.ajax({\n                    url: self.searchForm.attr('action'),\n                    type: \"POST\",\n                    contentType: false,\n                    processData: false,\n                    cache: false,\n                    data: formData,\n                    success: function (data) {\n                        if (data !== '') {\n                            var selector = '#md_' + data.join(',#md_');\n\n                            $(selector).removeClass('searched');\n                        }\n\n                        self._enableList();\n\n                        self._anyResults();\n                    }\n                });\n            }\n        },\n        // Displays no results notification if there are no results\n        _anyResults: function () {\n            if (this.isRetrieved) {\n                if (this.mediaList.find('li').length === this.mediaList.find('.searched,.filtered').length) {\n                    this.noResults.addClass('active');\n                } else {\n                    this.noResults.removeClass('active');\n                }\n            }\n        },\n        // Forces hide no results notification\n        _yesResults: function () {\n            this.noResults.removeClass('active');\n        },\n        // Enables uploader\n        _enableUploader: function () {\n            this.uploader.options.enabled = true;\n        }\n    };\n\n    // Register to window namespace\n    window.Library = Library;\n\n    // LibraryIndicator Constructor\n    function LibraryIndicator(name, size) {\n        this._init(name);\n\n        this.app = window.documentsLibrary;\n    }\n\n    // Inherit from Indicator\n    LibraryIndicator.prototype = Indicator.prototype;\n\n    // Overload Indicator _init\n    LibraryIndicator.prototype._init = function (name) {\n        this.parent = $('<li class=\"indicator\"></li>');\n\n        this.thumbnail = $('<div class=\"document-thumbnail\"></div>');\n        this.thumbnail.appendTo(this.parent);\n\n        this.name = $('<p>' + name + '</p>');\n        this.name.appendTo(this.parent);\n\n        $('<i class=\"icon-check\"></i>').appendTo(this.parent);\n\n        this.progressBar = $('<div class=\"progress\"></div>');\n        this.progressBar.appendTo(this.thumbnail);\n    };\n\n    // Overload Indicator _error\n    LibraryIndicator.prototype._error = function (data) {\n        this.parent.remove();\n    };\n\n    // Overload Indicator _success\n    LibraryIndicator.prototype._success = function (data) {\n        this.parent.removeClass('indicator');\n\n        this.parent.attr('data-id', data.id);\n        this.parent.attr('id', 'md_' + data.id);\n        this.parent.attr('data-name', html_entities(data.name));\n        this.parent.attr('data-flag', data.type);\n        this.parent.attr('data-size', data.size);\n        this.parent.attr('data-mimetype', data.mimetype);\n\n        this.thumbnail.html(data.thumbnail);\n\n        // Refilter the app\n        this.app.refilter();\n\n        // Select new uploaded media\n        this.app.selectMediaById(data.id);\n    };\n\n    // Overload Indicator setProgress\n    LibraryIndicator.prototype.setProgress = function (percentage) {\n        percentage = percentage.toString() + '%';\n\n        this.progressBar.height(percentage).width(percentage);\n    };\n\n    // Register indicator to the window namespace\n    window.LibraryIndicator = LibraryIndicator;\n\n})(window);",";( function(window) {\n    'use strict';\n\n    /**\n     * Gallery constructor\n     *\n     * @param DOM Object\n     */\n    function Gallery(el, library) {\n        this.type = 'gallery';\n\n        this.el = el;\n        this.library = library;\n\n        this.container = this.el.find('.form-media-container');\n\n        this.input = this.el.find('input[type=\"hidden\"]');\n\n        this.addButton = this.el.find('.button-add');\n        this.clearButton = this.el.find('.button-clear');\n\n        this.mediaGallery = this.el.find('.form-media-gallery');\n\n        this._initEvents();\n    }\n\n    // Prototype\n    Gallery.prototype = {\n        // Bind events\n        _initEvents : function() {\n            var self = this;\n\n            $(this.mediaGallery).sortable({\n                cursor : 'move',\n                tolerance : 'pointer',\n                placeholder : 'placeholder',\n                opacity : 0.7,\n                delay: 50,\n                stop : function() { self._setGallery(); }\n            }).disableSelection();\n\n            // Bind events for non touch screens\n            if(!Modernizr.touch) {\n                this.mediaGallery.find('.icon-cancel').on('click', function() {\n                    var parent = $(this).parent();\n\n                    $(parent).remove();\n\n                    self._setGallery();\n                });\n            }\n\n            this.clearButton.on('click', function(e) {\n                self._clearGallery();\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            this.addButton.on('click', function(e) {\n                self.library.run(self);\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n        },\n        _clearGallery: function() {\n            this.input.val('');\n\n            this.mediaGallery.html('');\n\n            this.container.addClass('empty');\n        },\n        // Parses gallery string\n        _parseGallery : function() {\n            var array = $(this.mediaGallery).sortable('toArray', {attribute: 'data-id'});\n\n            return JSON.stringify(array);\n        },\n        // Sets gallery string\n        _setGallery : function() {\n            this.input.val(this._parseGallery());\n        },\n        // Returns the current value\n        getValue : function() {\n            return this.input.val();\n        },\n        // Sets the value\n        setValue : function(gallery) {\n            this._clearGallery();\n            // Check length\n            if(gallery.length > 0) {\n                this.container.removeClass('empty');\n\n                this.mediaGallery.html('');\n\n                var array = [];\n\n                for(var i = 0; i < gallery.length; i++) {\n                    array.push(gallery[i].id);\n\n                    this._createThumbnail(gallery[i]);\n                }\n\n                this.input.val(JSON.stringify(array));\n            }\n        },\n        // Create a new thumbnail\n        _createThumbnail : function(media) {\n            var thumbnail = $('<li data-id=\"' + media.id + '\"><i class=\"icon-cancel\"></i></li>');\n\n            $('<img src=\"' + media.thumbnail.attr('src') + '\" alt=\"' + html_entities(media.name) + '\">').appendTo(thumbnail);\n\n            this.mediaGallery.append(thumbnail);\n        }\n    };\n\n    window.Gallery = Gallery;\n\n})(window);",";(function (window) {\n    'use strict';\n\n    /**\n     * Document constructor\n     *\n     * @param DOM Object\n     */\n    function Document(el, library) {\n        this.type = 'document';\n\n        this.el = el;\n        this.library = library;\n\n        this.container = this.el.find('.form-media-container');\n\n        this.input = this.el.find('input[type=\"hidden\"]');\n\n        this.addButton = this.el.find('.button-add');\n        this.removeButton = this.el.find('.button-clear');\n\n        this.thumbnail = this.el.find('.form-document-thumbnail span');\n        this.fileName = this.el.find('.form-document-name');\n\n        this.filter = this.el.data('filter');\n\n        this._initEvents();\n    }\n\n    // Prototype\n    Document.prototype = {\n        // Bind events\n        _initEvents: function () {\n            var self = this;\n\n            this.removeButton.on('click', function (e) {\n                self._removeDocument();\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Bind open\n            this.addButton.on('click', function (e) {\n                self.library.run(self);\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n        },\n        // Remove file\n        _removeDocument: function () {\n            this.input.val('');\n\n            this.thumbnail.attr('src', '');\n\n            this.fileName.text('');\n\n            this.container.addClass('empty');\n        },\n        // Returns the current value\n        getValue: function () {\n            return this.input.val();\n        },\n        // Sets the value\n        setValue: function (media) {\n            if (media !== null) {\n                this.container.removeClass('empty');\n\n                this.input.val(media.id);\n\n                this.fileName.text(media.name);\n\n                this.thumbnail.html(media.thumbnail);\n            } else {\n                this._removeDocument();\n            }\n        }\n    };\n\n    // Register to window namespace\n    window.Document = Document;\n\n})(window);",";(function (window) {\n    'use strict';\n\n    /**\n     * Collection constructor\n     *\n     * @param DOM Object\n     */\n    function NodeCollection(el, single) {\n        this.el = el;\n\n        this.single = (typeof single == 'undefined') ? false : single;\n\n        this._init();\n    }\n\n    // Prototype\n    NodeCollection.prototype = {\n        _init: function () {\n            this.container = this.el.find('.form-nodes-container');\n            this.sortable = this.container.find('ul.form-items-list-sortable');\n            this.results = this.container.find('ul.form-items-list-results');\n            this.search = this.container.find('input[name=\"_nodesearch\"]');\n            this.valueInput = this.container.find('input[type=\"hidden\"]');\n            this.parent = this.el.closest('.form-group');\n\n            this.searchurl = this.el.find('.form-items-search').data('searchurl');\n\n            this.searching = false;\n\n            this._extractValue();\n\n            this.initEvents();\n        },\n        _extractValue: function () {\n            var nodes = this.valueInput.val().trim();\n\n            this.nodes = [];\n\n            if (nodes.trim() == '') {\n                return;\n            }\n\n            if (this.single) {\n                this.nodes[nodes] = nodes;\n            } else {\n                this.nodes = JSON.parse(nodes);\n            }\n        },\n        initEvents: function () {\n            var self = this;\n\n            this.search.bind('keydown', function (e) {\n                var q = $(this).val().trim(),\n                    input = $(this);\n\n                if (e.which == 27) {\n                    e.stopPropagation();\n\n                    if (q === '') {\n                        input.blur();\n                    } else {\n                        input.val('');\n                    }\n\n                    self._clearSearch();\n\n                    // This blurs field, no need to go further\n                    return;\n                } else if (e.which == 13) {\n                    e.preventDefault();\n                }\n\n                if (!self.searching && q.length > 0) {\n                    self._search(q);\n                }\n            });\n\n            this.search.on('focus', function () {\n                self._showResults();\n            });\n\n            this.results.on('click', 'li', function () {\n                self._addToSortable($(this));\n            });\n\n            this.sortable.on('click', 'i.icon-cancel', function (e) {\n                e.stopPropagation();\n\n                self._removeNode($(this).parent());\n            });\n\n            // Hiding search\n            $('body').click(function () {\n                self._hideResults();\n            });\n\n            this.parent.click(function (e) {\n                e.stopPropagation();\n            });\n\n            // Not sortable if single\n            if (!this.single) {\n                $(this.sortable).sortable({\n                    tolerance: 'pointer',\n                    placeholder: 'placeholder',\n                    opacity: 0.7,\n                    delay: 50,\n                    stop: function () {\n                        self._regenerateValue();\n                    }\n                }).disableSelection();\n            }\n        },\n        _search: function (keywords) {\n            var self = this;\n\n            if (!self.searching) {\n                $.post(this.searchurl, {q: keywords}, function (data) {\n                    self._populateResults(data);\n                });\n            }\n        },\n        _populateResults: function (nodes) {\n            this.results.empty();\n\n            for (var key in nodes) {\n                // For some reason there are null results coming from PHP\n                if (this.nodes.indexOf(key) == -1 && nodes[key] !== null) {\n                    var item = this._createListItem(key, nodes[key]);\n\n                    this.results.append(item);\n                }\n            }\n        },\n        _createListItem: function (id, title) {\n            return $('<li data-id=\"' + id + '\">' + title + '</li>');\n        },\n        _addToSortable: function (item) {\n            item.append('<i class=\"icon-cancel\"></i>');\n\n            // Clear for single item\n            if (this.single) {\n                this.sortable.empty();\n                this.nodes = [];\n            }\n\n            this.sortable.append(item);\n\n            this.nodes.push(item.data('id'));\n\n            this._regenerateValue();\n\n            this._clearSearch();\n        },\n        _removeNode: function (item) {\n            var i = this.nodes.indexOf(item.data('id'));\n\n            delete this.nodes[i];\n\n            item.remove();\n\n            this._regenerateValue();\n        },\n        _regenerateValue: function () {\n            this.container.removeClass('empty');\n\n            if (count(this.nodes) == 0) {\n                this.container.addClass('empty');\n            }\n\n            var val = '';\n\n            if (this.single) {\n                var node = this.sortable.find('li:first-child');\n\n                if (node.length == 1) {\n                    val = node.data('id');\n                }\n            } else {\n                var array = [],\n                    nodes = this.sortable.find('li');\n\n                for(var i = 0; i < nodes.length; i++) {\n                    array.push($(nodes[i]).data('id'));\n                }\n\n                val = JSON.stringify(array);\n            }\n            console.log(val);\n            this.valueInput.val(val);\n        },\n        _clearSearch: function () {\n            this.results.empty();\n            this.search.val('');\n        },\n        _showResults: function () {\n            this.results.removeClass('hidden');\n        },\n        _hideResults: function () {\n            this.results.addClass('hidden');\n        }\n    };\n\n    window.NodeCollection = NodeCollection;\n\n})(window);",";(function (window) {\n    'use strict';\n\n    // Editor constructor\n    function Editor(el, library, dialog) {\n        this._init(el, library, dialog);\n    }\n\n    // Editor app\n    Editor.prototype = {\n\n        /**\n         * Initialises app\n         *\n         * @param DOM\n         */\n        _init: function (el, library, dialog) {\n            this.el = el;\n            this.text = this.el.find('textarea');\n            this.library = library;\n            this.dialog = dialog;\n\n            // Temporary cache for cursor start\n            // currently only used for the link modal due to a chrome bug\n            this.cursorStart = null;\n\n            this.toolbar = this.el.find('.markdown-editor-toolbar');\n\n            this._controls();\n\n            this._initEvents();\n        },\n\n        /**\n         * Initialises the events for the editor\n         */\n        _initEvents: function () {\n            var self = this;\n\n            // Resize the textarea\n            this.text.height('auto');\n            this.text.height(this.text.prop('scrollHeight') + 'px');\n\n            // Bind resize events\n            this.text.on('change', function (e) {\n                self.resize(e);\n            });\n            this.text.on('cut paste drop keydown', function (e) {\n                self.delayedResize(e);\n            });\n            $(window).resize(function (e) {\n                self.delayedResize(e);\n            });\n\n            // Bind tabbing\n            this.text.on('keydown', function (e) {\n                if (e.keyCode === 9) {\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    if (e.shiftKey && e.keyCode === 9) {\n                        self.flush(e);\n                    } else {\n                        self.indent(e);\n                    }\n                }\n            });\n\n            // Set tool clicks\n            this.toolbar.on('click', '.toolset li', function (e) {\n                var method = $(this).data('method');\n\n                if (self.controls[method]) {\n                    self.controls[method]();\n                }\n\n                self.delayedResize(e);\n\n                return false;\n            });\n        },\n\n        /**\n         * Returns the gallery controller\n         */\n        _getGalleryController: function () {\n            return new EditorGallery(this, this.library);\n        },\n\n        /*\n         * Returns the document controller\n         */\n        _getDocumentController: function () {\n            return new EditorDocument(this, this.library);\n        },\n\n        /**\n         * Resizes the textarea for each line\n         */\n        resize: function (e) {\n            var bodyScrollPos = $('body').prop('scrollTop');\n            this.text.height('auto');\n            this.text.height(this.text.prop('scrollHeight') + 'px');\n            $('body').prop('scrollTop', bodyScrollPos);\n        },\n\n        /* 0-timeout to get the already changed text */\n        delayedResize: function (e) {\n            var self = this;\n            var timeout = setTimeout(function () {\n                self.resize(e);\n            }, 0);\n        },\n\n        /**\n         * Inserts string at the cursor\n         *\n         * @param string\n         */\n        insert: function (str) {\n            var element = this.text[0];\n\n            var start = element.selectionStart;\n            var value = element.value;\n\n            element.value = value.substring(0, start) + str + value.substring(start);\n\n            element.selectionEnd = start + str.length;\n        },\n\n        /**\n         * Inserts string at the given start and end\n         *\n         * @param string\n         */\n        insertAt: function (str, start)\n        {\n            var element = this.text[0],\n                value = element.value;\n\n            element.value = value.substring(0, start) + str + value.substring(start);\n\n            element.selectionStart = start, element.selectionEnd = start + str.length;\n        },\n\n        /**\n         * Removes selected string\n         */\n        deleteSelection: function () {\n            var element = this.text[0];\n\n            var start = element.selectionStart, end = element.selectionEnd;\n            var value = element.value;\n\n            element.value = value.substring(0, start) + value.substring(end);\n        },\n\n        /**\n         * Wraps selection with given params\n         */\n        wrap: function (left, right) {\n            var element = this.text[0];\n\n            var start = element.selectionStart, end = element.selectionEnd;\n            var value = element.value;\n\n            element.value = value.substring(0, start) + left + value.substring(start, end) + right + value.substring(end);\n\n            element.selectionStart = start;\n            element.selectionEnd = end + left.length + right.length;\n        },\n\n        /**\n         * Tabs all lines in the selection\n         */\n        indent: function (e) {\n            var element = this.text[0];\n\n            var start = element.selectionStart, end = element.selectionEnd;\n            var value = element.value;\n\n            var selections = value.substring(start, end).split(\"\\n\");\n\n            for (var i = 0; i < selections.length; i++) {\n                selections[i] = \"\\t\" + selections[i];\n            }\n\n            element.value = value.substring(0, start) + selections.join(\"\\n\") + value.substring(end);\n\n            if (end > start) {\n                element.selectionStart = start;\n                element.selectionEnd = end + selections.length;\n            } else {\n                element.selectionStart = element.selectionEnd = start + 1;\n            }\n        },\n        /**\n         * Untabs all lines in the selection\n         */\n        flush: function (e) {\n            var element = this.text[0];\n\n            var start = element.selectionStart, end = element.selectionEnd;\n            var value = element.value;\n\n            var pattern = new RegExp(/^[\\t]{1}/);\n\n            var edits = 0;\n\n            if (start === end) {\n                while (start > 0) {\n                    if (value.charAt(start) === \"\\n\") {\n                        start++;\n                        break;\n                    }\n\n                    start--;\n                }\n\n                var portion = value.substring(start, end);\n                var matches = portion.match(pattern);\n\n                if (matches) {\n                    element.value = value.substring(0, start) + portion.replace(pattern, '') + value.substring(end);\n                    end--;\n                }\n\n                element.selectionStart = element.selectionEnd = end;\n            } else {\n                var selections = value.substring(start, end).split(\"\\n\");\n\n                for (var i = 0; i < selections.length; i++) {\n                    if (selections[i].match(pattern)) {\n                        edits++;\n                        selections[i] = selections[i].replace(pattern, '');\n                    }\n                }\n\n                element.value = value.substring(0, start) + selections.join(\"\\n\") + value.substring(end);\n\n                element.selectionStart = start;\n                element.selectionEnd = end - edits;\n            }\n        },\n\n        /**\n         * Sets the editor controls\n         */\n        _controls: function () {\n            var self = this;\n\n            this.controls = {\n                bold: function () {\n                    self.wrap('**', '**');\n                },\n                italic: function () {\n                    self.wrap('*', '*');\n                },\n                code: function () {\n                    self.wrap('`', '`');\n                },\n                link: function () {\n                    var element = self.text[0];\n\n                    var start = element.selectionStart, end = element.selectionEnd;\n                    var value = element.value;\n\n                    var selection = value.substring(start, end);\n\n                    self.cursorStart = start;\n\n                    self.dialog.run(self, 'link');\n\n                    self.dialog.textInput.val(selection);\n                    self.dialog.urlInput.focus();\n                },\n                list: function () {\n                    var element = self.text[0];\n\n                    var start = element.selectionStart, end = element.selectionEnd;\n                    var value = element.value;\n\n                    var selections = value.substring(start, end).split(\"\\n\");\n\n                    for (var i = 0; i < selections.length; i++) {\n                        selections[i] = '* ' + selections[i];\n                    }\n\n                    element.value = value.substring(0, start) + \"\\n\" + selections.join(\"\\n\") + \"\\n\" + value.substring(end);\n                },\n                quote: function () {\n                    var element = self.text[0];\n\n                    var start = element.selectionStart, end = element.selectionEnd;\n                    var value = element.value;\n\n                    var selections = value.substring(start, end).split(\"\\n\");\n\n                    for (var i = 0; i < selections.length; i++) {\n                        selections[i] = '> ' + selections[i];\n                    }\n\n                    element.value = value.substring(0, start) + selections.join(\"\\n\") + value.substring(end);\n                },\n                heading: function () {\n                    self.wrap('###', '');\n                },\n                hrule: function () {\n                    var element = self.text[0];\n\n                    var start = element.selectionStart, end = element.selectionEnd;\n                    var value = element.value;\n\n                    var ruler = '\\n***\\n';\n\n                    element.value = value.substring(0, start) + ruler + value.substring(end);\n\n                    element.selectionStart = element.selectionEnd = end + ruler.length;\n                },\n                readmore: function () {\n                    var element = self.text[0];\n\n                    var start = element.selectionStart, end = element.selectionEnd;\n                    var value = element.value;\n\n                    var readmore = '\\n![READMORE]!\\n';\n\n                    element.value = value.substring(0, start) + readmore + value.substring(end);\n\n                    element.selectionStart = element.selectionEnd = end + readmore.length;\n                },\n                media: function () {\n                    var element = self.text[0];\n\n                    var start = element.selectionStart, end = element.selectionEnd;\n                    var value = element.value;\n\n                    var selection = value.substring(start, end);\n\n                    self.dialog.run(self, 'library');\n\n                    self.dialog.sourceInput.val(selection);\n                }\n            };\n        }\n\n    };\n\n    // Register Editor to window namespace\n    window.Editor = Editor;\n\n\n    // Editor dialog constructor\n    function EditorDialog() {\n        this._init();\n    }\n\n    // Editor dialog prototype\n    EditorDialog.prototype = {\n        // Initialize\n        _init: function () {\n            var self = this;\n\n            // Create a new dialog\n            this.dialog = new Modal($('#modalEditor'), {\n                onConfirmEvent: function (dialog) {\n                    if (typeof this.controller != 'undefined' && this.controller !== null)\n                    {\n                        self._setValue();\n\n                        this.controller = null;\n                        this.mode = null;\n                    }\n                }\n            });\n\n            this.controller = null;\n\n            this.mode = null;\n\n            this.container = this.dialog.el.find('.modal');\n            this.libraryDialog = this.container.find('.editor-modal-library');\n            this.linkDialog = this.container.find('.editor-modal-link');\n\n            this.galleryButton = this.libraryDialog.find('.editor-modal-gallery-button');\n            this.mediaButton = this.libraryDialog.find('.editor-modal-document-button');\n\n            this.sourceInput = this.libraryDialog.find('input[name=\"_src\"]');\n            this.alttextInput = this.libraryDialog.find('input[name=\"_alt\"]');\n\n            this.urlInput = this.linkDialog.find('input[name=\"_link\"]');\n            this.textInput = this.linkDialog.find('input[name=\"_text\"]');\n\n            this._initEvents();\n        },\n        // Initializes events\n        _initEvents: function () {\n            // Cache self\n            var self = this;\n\n            // Gallery button\n            this.galleryButton.on('click', function (e) {\n                self.dialog.closeModal();\n\n                var controller = self.controller._getGalleryController();\n\n                controller.run();\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Document button\n            this.mediaButton.on('click', function (e) {\n                self.dialog.closeModal();\n\n                var controller = self.controller._getDocumentController();\n\n                controller.run();\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n        },\n        // Runs the dialog\n        run: function (controller, mode) {\n            this.setMode(mode);\n\n            this.controller = controller;\n\n            this._reset();\n\n            this.dialog.openModal();\n        },\n        // Sets the mode\n        setMode: function (mode) {\n            this.mode = mode;\n\n            this.container.removeClass('library link');\n            this.container.addClass(mode);\n        },\n        // Resets the dialog\n        _reset: function () {\n            this.sourceInput.val('');\n            this.alttextInput.val('');\n\n            this.urlInput.val('');\n            this.textInput.val('');\n        },\n        // Inserts a value depending on mode\n        _setValue: function () {\n            this.controller.deleteSelection();\n\n            if (this.mode === 'library') {\n                this._setValueLibrary();\n            } else if (this.mode === 'link') {\n                this._setValueLink();\n            }\n        },\n        // Set value as link\n        _setValueLink: function () {\n            var url = this.urlInput.val();\n\n            if (url.slice(0, 1) !== '#') {\n                url = add_http(url);\n            }\n\n            var text = (this.textInput.val().length > 0) ? this.textInput.val() : this.urlInput.val();\n\n            var str = '[' + text + '](' + url + ')';\n\n            this.controller.insertAt(str, this.controller.cursorStart);\n        },\n        // Set value as image\n        _setValueLibrary: function () {\n            this.controller.insert('![' + this.alttextInput.val() + '](' + this.sourceInput.val() + ')');\n        }\n    };\n\n    // Register editor dialog to window namespace\n    window.EditorDialog = EditorDialog;\n\n\n    // Editor gallery constructor\n    function EditorGallery(controller, library) {\n        this._init(controller, library);\n    }\n\n    // Editor media app\n    EditorGallery.prototype = {\n        // Initialize\n        _init: function (controller, library) {\n            this.library = library;\n\n            this.type = 'gallery';\n\n            this.controller = controller;\n        },\n        // Runs the app\n        run: function () {\n            this.library.run(this);\n        },\n        // Get value\n        getValue: function () {\n            return '';\n        },\n        // Set value\n        setValue: function (media) {\n            var array = [];\n\n            for (var i = 0; i < media.length; i++) {\n                array.push(media[i].id);\n            }\n\n            this.controller.insert('\\n[gallery ids=\"' + array.join(',') + '\"]\\n');\n        }\n    };\n\n    // Register editor gallery to window namespace\n    window.EditorGallery = EditorGallery;\n\n\n    // Editor gallery constructor\n    function EditorDocument(controller, library) {\n        this._init(controller, library);\n    }\n\n    // Editor media app\n    EditorDocument.prototype = {\n        // Initialize\n        _init: function (controller, library) {\n            this.library = library;\n\n            this.type = 'document';\n\n            this.controller = controller;\n        },\n        // Runs the app\n        run: function () {\n            this.library.run(this);\n        },\n        // Get value\n        getValue: function () {\n            return '';\n        },\n        // Set value\n        setValue: function (media) {\n            this.controller.insert('\\n[document id=\"' + media.id + '\"]\\n');\n        }\n    };\n\n    // Register editor media to window namespace\n    window.EditorDocument = EditorDocument;\n\n})(window);","// General highlighters\n$('.form-group input, .form-group textarea').focus(function () {\n    $(this).closest('.form-group').addClass('focus');\n});\n\n$('.form-group input, .form-group textarea').blur(function () {\n    $(this).closest('.form-group').removeClass('focus');\n});\n\n// Password strength meter\n$('.form-group-password').each(function () {\n    new Meter($(this));\n});\n\n// Slug fields\n$('.form-group-slug').each(function () {\n    new Slug($(this));\n});\n\n// Tag(Legacy) fields\n$('.form-group-tag').each(function () {\n    new TagLegacy($(this));\n});\n\n// Initialize color pickers\n$('input.minicolors').minicolors();\n\nwindow.documentsLibrary = new Library($('#library-modal-container'));\n\n// Initialize gallery fields\n$('.form-group-gallery').each(function () {\n    var gallery = new Gallery($(this), window.documentsLibrary);\n});\n\n// Initialize document fields\n$('.form-group-document').each(function () {\n    var document = new Document($(this), window.documentsLibrary);\n});\n\n// Initialize node collection fields\n$('.form-group-node-collection').each(function () {\n    var collection = new NodeCollection($(this));\n});\n\nwindow.editorDialog = new EditorDialog();\n\n// Editors\n$('.form-group-markdown').each(function () {\n    var editor = new Editor($(this), window.documentsLibrary, window.editorDialog);\n});\n\n// Publish and save button\n$('button.publish-save').on('click', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var form = $(this).closest('form');\n\n    $('<input name=\"_publish\" type=\"hidden\" value=\"publish\">').appendTo(form);\n\n    form.submit();\n});\n\n// Node options menu\n$('.node-option-formable').on('click', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var form = create_form_from($(this));\n\n    append_and_submit_form(form);\n});"],"sourceRoot":"/source/"}