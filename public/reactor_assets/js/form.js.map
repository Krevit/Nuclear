{"version":3,"sources":["password.js","fields.js","upload.js"],"names":[],"mappingsfile":"form.js","sourcesContent":[";( function(window) {\n    'use strict';\n\n    /**\n     * Meter constructor\n     *\n     * @param DOM Object el\n     * @param string field\n     */\n    function Meter(el, field, meter) {\n        this.el = el;\n\n        field = field || 'input[type=\"password\"]';\n        meter = meter || '.strength-meter > div';\n\n        this.field = this.el.find(field);\n        this.meter = this.el.find(meter);\n        this._init();\n    }\n\n    // Meter prototype\n    Meter.prototype = {\n        // Initializes meter\n        _init : function() {\n            this.characters = 0;\n            this.capitalletters = 0;\n            this.lowerletters = 0;\n            this.number = 0;\n            this.special = 0;\n\n            this.upperCase = new RegExp('[A-Z]');\n            this.lowerCase = new RegExp('[a-z]');\n            this.numbers = new RegExp('[0-9]');\n            this.specialchars = new RegExp('([!,%,&,@,#,$,^,*,?,_,~,/])');\n\n            var self = this;\n\n            this.field.on('keyup keydown', function() {\n                self._checkStrength($(this).val());\n            });\n        },\n        // Sets meter percentage\n        _setPercentage : function(percentage) {\n            this.meter.css({ 'width' : percentage + '%' });\n        },\n        // Sets meter class\n        _setClass : function(total) {\n            if(total <= 1) {\n                this.meter.removeClass();\n                this.meter.addClass('veryweak');\n            } else if(total === 2) {\n                this.meter.removeClass();\n                this.meter.addClass('weak');\n            } else if(total === 3) {\n                this.meter.removeClass();\n                this.meter.addClass('medium');\n            } else {\n                this.meter.removeClass();\n                this.meter.addClass('strong');\n            }\n        },\n        // Checks strength\n        _checkStrength : function(value) {\n            if (value.length >= 8) { this.characters = 1; } else { this.characters = 0; }\n            if (value.match(this.upperCase)) { this.capitalletters = 1; } else { this.capitalletters = 0; }\n            if (value.match(this.lowerCase)) { this.lowerletters = 1; }  else { this.lowerletters = 0; }\n            if (value.match(this.numbers)) { this.number = 1; }  else { this.number = 0; }\n            if (value.match(this.specialchars)) { this.special = 1; }  else { this.special = 0; }\n\n\n            var total = this._getTotal();\n            var percentage = this._getPercentage(5, total);\n\n            this._setPercentage(percentage);\n\n            this._setClass(total);\n        },\n        // Percentage helper\n        _getPercentage : function(a, b) {\n            return ((b / a) * 100);\n        },\n        // Gets total\n        _getTotal : function() {\n            return this.characters + this.capitalletters + this.lowerletters + this.number + this.special;\n        }\n    };\n\n    // Register meter to window namespace\n    window.Meter = Meter;\n\n})(window);","// General highlighters\n$('.form-group input, .form-group textarea').focus(function () {\n    $(this).closest('.form-group').addClass('focus');\n});\n\n$('.form-group input, .form-group textarea').blur(function () {\n    $(this).closest('.form-group').removeClass('focus');\n});\n\n// Password strength meter\n$('.form-group-password').each(function () {\n    new Meter($(this));\n});",";( function(window) {\n    'use strict';\n\n    // Uploader Constructor\n    function Uploader(zone, options) {\n        this._init(zone, options);\n    }\n\n    // Uploader\n    Uploader.prototype = {\n        /**\n         * Constructor\n         *\n         * @param DOM Object\n         * @param array\n         */\n        _init : function(self, options, app, external) {\n            this.zone = self;\n\n            var defaults = {\n                selectButton : '#dropzone-select-button',\n                uploadInput : '#dropzone-file',\n                outputList: '#upload-list',\n                enabled: true\n            };\n\n            this.options = $.extend(defaults, options);\n            this.token = this.zone.find(\"input[name='_token']\").first().val();\n            this.action = $(this.zone).attr('action');\n\n            this.fileQueue = [];\n            this.statusIndicators = [];\n            this.current = 0;\n            this.inProcess = false;\n\n            this.maxsize = this.zone.data('maxsize');\n            window.editRoute = this.zone.data('editroute');\n\n            this._initEvents();\n        },\n        /**\n         * Binds events\n         */\n        _initEvents : function () {\n            var self = this;\n\n            // Class binds\n            this.zone.bind(\"dragenter, dragover\", function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                $(this).addClass('dragenter');\n            });\n\n            this.zone.bind(\"dragleave\", function() {\n                $(this).removeClass('dragenter');\n            });\n\n            // Disable window drop\n            $(window).bind('drop', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Bind file drop\n            this.zone.bind(\"drop\", function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                self._queue(e.originalEvent.dataTransfer.files);\n\n                $(this).removeClass('dragenter');\n            });\n\n            // Bind input change\n            $(this.options.uploadInput).bind(\"change\", function() {\n                self._queue($(this)[0].files);\n            });\n\n            // Bind optional select button if exists\n            if(this.options.selectButton !== false) {\n                $(this.options.selectButton).bind(\"click\", function(e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    $(self.options.uploadInput).click();\n                });\n            }\n        },\n        /**\n         * Adds new files to the queue\n         *\n         * @param array\n         */\n        _queue : function(files) {\n            if(!this.options.enabled) { return false; }\n\n            for(var i=0; i < files.length; i++) {\n                if(files[i].size < this.maxsize) {\n\n                    var fd = new FormData();\n                    fd.append('file', files[i]);\n\n                    this.fileQueue.push(fd);\n\n                    // Escape the file name in order to prevent XSS\n                    var indicator = new Indicator(html_entities(files[i].name), files[i].size);\n\n                    this.statusIndicators.push(indicator);\n\n                    if(this.options.outputList !== false) {\n                        $(this.options.outputList).append(indicator.parent);\n                    }\n                }\n            }\n\n            if(this.inProcess === false) {\n                this._upload();\n            }\n        },\n        /**\n         * Iterates through queue and uploads files\n         */\n        _upload : function() {\n            var self = this;\n\n            if(this.current < this.fileQueue.length) {\n                this.inProcess = true;\n\n                var fd = this.fileQueue[this.current],\n                    indicator = this.statusIndicators[this.current];\n\n                $.ajax({\n                    xhr : function() {\n                        var xhrobj = $.ajaxSettings.xhr();\n\n                        if(xhrobj.upload) {\n                            xhrobj.upload.addEventListener('progress', function(e) {\n                                indicator.setProgress(loaded(e));\n                            });\n                        }\n\n                        return xhrobj;\n                    },\n\n                    url : self.action,\n                    type : 'POST',\n                    contentType : false,\n                    processData : false,\n                    cache : false,\n\n                    beforeSend: function(request) {\n                        return request.setRequestHeader('X-CSRF-Token', self.token);\n                    },\n\n                    data : fd,\n\n                    success : function(data) {\n                        indicator.complete(data);\n                    }\n                })\n                .always(function() {\n                    self.current++;\n                    self._upload();\n                });\n\n            } else {\n                this.inProcess = false;\n            }\n        }\n    };\n\n    window.Uploader = Uploader;\n\n\n    // Indicator Constructor\n    function Indicator(name, size) {\n        this._init(name, size);\n    }\n\n    // Indicator\n    Indicator.prototype = {\n        /**\n         * Constructor\n         *\n         * @param string\n         * @param int\n         */\n        _init : function(name, size) {\n            name = html_entities(name);\n\n            // Parent\n            this.parent = $('<li class=\"material-light\"></li>');\n            // Progress bar\n            this.progressContainer = $('<div class=\"upload-progress-container\"></div>').appendTo(this.parent);\n            this.progressBar = $('<div class=\"upload-progress-bar\"></div>').appendTo(this.progressContainer);\n\n            // Indicator wrapper\n            this.messageWrapper = $('<div class=\"upload-message-wrapper\"></div>').appendTo(this.parent);\n\n            // Icon\n            this.thumbnail = $('<span class=\"upload-thumbnail\"></span>').appendTo(this.messageWrapper);\n            // Container\n            this.container = $('<p></p>').appendTo(this.messageWrapper);\n            // File name\n            this.filename = $('<span class=\"upload-text\">' + name + '</span>').appendTo(this.container);\n            // File size / Message\n            this.message = $('<span class=\"upload-text muted\">' + readable_size(size) + '</span>').appendTo(this.container);\n\n            // Clone filename and message\n            this.container.clone().appendTo(this.progressContainer);\n        },\n        /**\n         * Set the progressbar width\n         *\n         * @param int\n         */\n        setProgress : function(percent) {\n            this.progressBar.width(percent.toString() + \"%\");\n        },\n        /**\n         * Takes action on the completed upload\n         *\n         * @param json\n         */\n        complete : function(reply) {\n            this.setProgress(100);\n\n            if(reply.type === 'success') {\n                this._success(reply.response);\n            } else if(reply.type === 'error') {\n                this._error(reply);\n            }\n        },\n        /**\n         * Makes the UI changes when upload is completed\n         *\n         * @param json string\n         */\n        _success : function(data) {\n            $(this.parent).addClass('complete');\n\n            this.thumbnail.html(data.thumbnail);\n\n            this.message.html(data.mimetype + ' | ' + this.message.text());\n        },\n        /**\n         * Makes the UI changes when upload returns error\n         *\n         * @param json string\n         */\n        _error : function(data) {\n            $(this.parent).addClass('error');\n\n            $(this.thumbnail).html('<i class=\"icon-cancel\"></i>');\n\n            $(this.message).html(data.response);\n        }\n    };\n\n    // Register indicator to the window namespace\n    window.Indicator = Indicator;\n\n}) ( window );\n\nvar Uploader = new Uploader($('#dropzone'));"],"sourceRoot":"/source/"}