{"version":3,"sources":["tag.js"],"names":[],"mappingsfile":"tag.js","sourcesContent":["// Strict definitions\n;(function (window) {\n    'use strict';\n\n    // Tag field constructor\n    function Tag(el) {\n        this.el = el;\n\n        this._init();\n    }\n\n    // Tag prototype\n    Tag.prototype = {\n        // Initialize\n        _init: function () {\n            this.list = this.el.find('ul.taglist');\n            this.inputItem = this.list.find('li.tag-input');\n            this.input = this.inputItem.find('input[name=\"name\"]');\n\n            this.urlunlink = this.el.data('urlunlink');\n            this.urladd = this.el.data('urladd');\n\n            this.tags = [];\n            this.tempTags = [];\n\n            this._parseExistingTags();\n\n            this._initEvents();\n        },\n        _parseExistingTags: function () {\n            var tags = this.list.find('.tag'),\n                self = this;\n\n            tags.each(function () {\n                var el = $(this);\n\n                self._addToTagList(\n                    el.data('id'),\n                    el.find('span').text().toLowerCase()\n                );\n            });\n        },\n        _addToTagList: function (id, name) {\n            this.tags[id] = name;\n        },\n        // Initialize events\n        _initEvents: function () {\n            var self = this;\n\n            this.input.bind('keydown', function (e) {\n                var input = $(this);\n\n                if (e.which === 27) {\n                    e.stopPropagation();\n\n                    if (input.val() === '') {\n                        input.blur();\n                    } else {\n                        input.val('');\n                    }\n\n                } else if (e.which === 9 || e.which === 13) {\n                    e.preventDefault();\n\n                    var val = input.val().trim();\n\n                    if (val !== '') {\n                        self._addTag(input.val());\n                        input.val('');\n                    }\n                }\n            });\n\n            // Remove buttons\n            this.list.on('click', '.icon-cancel', function () {\n                self._unlinkTag($(this));\n            });\n        },\n        _unlinkTag: function (tag) {\n            var parent = tag.closest('.tag'),\n                id = parent.data('id');\n            // Quit if an action is already going on\n            if (parent.hasClass('disabled')) {\n                return;\n            }\n\n            parent.addClass('disabled');\n\n            var self = this;\n\n            $.ajax({\n                type: \"POST\",\n                url: self.urlunlink,\n                data: {\n                    _method: \"DELETE\",\n                    tag: id\n                },\n                success: function (data) {\n                    self._removeTag(data.id);\n                },\n                error: function () {\n                    self._enableTag(id)\n                }\n            });\n        },\n        // Removes an item\n        _removeTag: function (id) {\n            var tag = this.list.find('li[data-id=\"' + id + '\"]');\n            delete this.tags[id];\n            tag.remove();\n            this._setListClass();\n        },\n        // Removes a temporary item\n        _removeTempTag: function (id) {\n            var tag = this.list.find('li[data-tempid=\"' + id + '\"]');\n            delete this.tempTags[id];\n            tag.remove();\n            this._setListClass();\n        },\n        _enableTag: function (id) {\n            this.list.find('li[data-id=\"' + id + '\"]').removeClass('disabled');\n        },\n        _enableTempTag: function (tempid, id) {\n            var tag = this.list.find('li[data-tempid=\"' + tempid + '\"]');\n            tag.removeClass('disabled');\n            tag.removeData('tempid');\n            tag.attr({'data-id': id});\n        },\n        // Adds an item\n        _addTag: function (str) {\n            var i = this.tags.indexOf(str.toLowerCase());\n\n            if (i > -1) {\n                this._flashTag(i);\n            } else {\n                this.tempTags.push(str);\n                i = this.tempTags.indexOf(str);\n                this._createTag(i, str);\n\n                this._linkTag(i, str);\n\n                this._setListClass();\n            }\n        },\n        _linkTag: function (i, str) {\n            var self = this;\n\n            $.ajax({\n                type: \"POST\",\n                url: self.urladd,\n                data: {\n                    _method: \"PUT\",\n                    name: str\n                },\n                success: function (data) {\n                    if (!self._tagExists(data.id)) {\n                        self._enableTempTag(i, data.id);\n                        self._addToTagList(data.id, data.name);\n                        delete self.tempTags[i];\n                    } else {\n                        self._removeTempTag(i);\n                        self._flashTag(data.id);\n                    }\n\n                    self._setListClass();\n                },\n                error: function () {\n                    self._removeTempTag(i);\n\n                    self._setListClass();\n                }\n            });\n        },\n        _tagExists: function (id) {\n            return (typeof this.tags[id] != 'undefined') ? true : false;\n        },\n        // Creates a tag and appends to list\n        _createTag: function (id, str) {\n            $('<li class=\"tag disabled\" data-id=\"\" data-tempid=\"' + id + '\">' + html_entities(str) + '<i class=\"icon-cancel\"></i></li>').insertBefore(this.inputItem);\n        },\n        // Flashes a tag\n        _flashTag: function(id) {\n            var duplicate = this.list.find('li[data-id=\"' + id + '\"]');\n\n            duplicate.addClass('flash');\n\n            setTimeout(function () {\n                duplicate.removeClass('flash');\n            }, 100);\n        },\n        // Sets the list class\n        _setListClass: function () {\n            if (count(this.tags) == 0) {\n                this.list.addClass('empty');\n            } else {\n                this.list.removeClass('empty');\n            }\n        }\n    };\n\n    // Register to window namespace\n    window.Tag = Tag;\n\n})(window);\n\n// Tag fields\n$('.form-group-tag').each(function () {\n    new Tag($(this));\n});\n\n$('.form-group input').focus(function () {\n    $(this).closest('.form-group').addClass('focus');\n});\n$('.form-group input').blur(function () {\n    $(this).closest('.form-group').removeClass('focus');\n});"],"sourceRoot":"/source/"}