{"version":3,"sources":["passwords.js","slugs.js","forms.js"],"names":[],"mappingspEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"forms.js","sourcesContent":[";( function(window) {\n    'use strict';\n\n    /**\n     * PasswordMeter constructor\n     *\n     * @param DOM Object el\n     * @param string field\n     */\n    function PasswordMeter(el, field, meter) {\n        this.el = el;\n\n        field = field || 'input[type=\"password\"]';\n        meter = meter || '.form-group__password > .password-strength';\n\n        this.field = this.el.find(field);\n        this.meter = this.el.find(meter);\n        this._init();\n    }\n\n    // PasswordMeter prototype\n    PasswordMeter.prototype = {\n        // Initializes meter\n        _init : function() {\n            this.characters = 0;\n            this.capitalletters = 0;\n            this.lowerletters = 0;\n            this.number = 0;\n            this.special = 0;\n\n            this.upperCase = new RegExp('[A-Z]');\n            this.lowerCase = new RegExp('[a-z]');\n            this.numbers = new RegExp('[0-9]');\n            this.specialchars = new RegExp('([!,%,&,@,#,$,^,*,?,_,~,/])');\n\n            var self = this;\n\n            this.field.on('keyup keydown', function() {\n                self._checkStrength($(this).val());\n            });\n        },\n        // Sets meter percentage\n        _setPercentage : function(percentage) {\n            this.meter.css({ 'width' : percentage + '%' });\n        },\n        // Sets meter class\n        _setClass : function(total) {\n            if(total <= 1) {\n                this.meter.removeClass();\n                this.meter.addClass('password-strength password-strength--veryweak');\n            } else if(total === 2) {\n                this.meter.removeClass();\n                this.meter.addClass('password-strength password-strength--weak');\n            } else if(total === 3) {\n                this.meter.removeClass();\n                this.meter.addClass('password-strength password-strength--medium');\n            } else {\n                this.meter.removeClass();\n                this.meter.addClass('password-strength password-strength--strong');\n            }\n        },\n        // Checks strength\n        _checkStrength : function(value) {\n            if (value.length >= 8) { this.characters = 1; } else { this.characters = 0; }\n            if (value.match(this.upperCase)) { this.capitalletters = 1; } else { this.capitalletters = 0; }\n            if (value.match(this.lowerCase)) { this.lowerletters = 1; }  else { this.lowerletters = 0; }\n            if (value.match(this.numbers)) { this.number = 1; }  else { this.number = 0; }\n            if (value.match(this.specialchars)) { this.special = 1; }  else { this.special = 0; }\n\n\n            var total = this._getTotal();\n            var percentage = this._getPercentage(5, total);\n\n            this._setPercentage(percentage);\n\n            this._setClass(total);\n        },\n        // Percentage helper\n        _getPercentage : function(a, b) {\n            return ((b / a) * 100);\n        },\n        // Gets total\n        _getTotal : function() {\n            return this.characters + this.capitalletters + this.lowerletters + this.number + this.special;\n        }\n    };\n\n    // Register meter to window namespace\n    window.PasswordMeter = PasswordMeter;\n\n})(window);",";( function(window) {\n    'use strict';\n\n    // Constructor\n    function Slug(el) {\n        this.el = el;\n\n        this._init();\n    }\n\n    // Slug prototype\n    Slug.prototype = {\n        // Initialize\n        _init : function() {\n            this.input = this.el.find('input[type=\"text\"]');\n\n            var follow = typeof this.input.data('follows') !== 'undefined' ?\n                this.input.data('follows') :\n                '#title';\n\n            this.follow = $(follow);\n\n            this.dirty = (this.input.val() !== '') ? true : false;\n\n            this._initEvents();\n        },\n        _initEvents : function() {\n            var self = this;\n\n            this.input.on('keyup', function() {\n                self.dirty = true;\n            });\n\n            this.follow.on('keyup', function() {\n                if(!self.dirty) { self._setSlug(); }\n            });\n\n            this.input.on('blur', function() {\n                if(self.input.val() === '') {\n                    self.changed = false;\n                    self._setSlug();\n                }\n            });\n        },\n        // Set slug\n        _setSlug : function() {\n            var slug = this._slugify(this.follow.val());\n\n            this.input.val(slug);\n        },\n        _slugify : function(str) {\n            str = str.replace(/^\\s+|\\s+$/g, '').toLowerCase();\n\n            // Remove accents\n            var from = \"àáäâèéëêıìíïîòóöôùúüûñçğş·/_,:;\", to = \"aaaaeeeeiiiiioooouuuuncgs------\";\n\n            for(var i = 0, l = from.length; i < l; i++) {\n                str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\n            }\n\n            return str.replace(/[^a-z0-9 -]/g, '') // Remove invalid chars\n                .replace(/\\s+/g, '-') // Collapse whitespace and replace by -\n                .replace(/-+/g, '-'); // Collapse dashes\n        }\n    };\n\n    window.Slug = Slug;\n\n}) (window);","// GENERAL LABEL HIGHLIGHTERS\n$('.form-group input, .form-group textarea').focus(function () {\n    $(this).closest('.form-group').find('.form-group__label').addClass('form-group__label--focus');\n});\n\n$('.form-group input, .form-group textarea').blur(function () {\n    $(this).closest('.form-group').find('.form-group__label').removeClass('form-group__label--focus');\n});\n\n// LOCATE FORM BUTTONS\nvar formContainer = $('#content'),\n    formButtons = $('#formButtons');\n\nfunction locateFormButtons() {\n    var wH = $(window).height(),\n        fcH = formContainer.outerHeight();\n\n    // This 12px thing is because of the content container needs to have an\n    // extra of 12px bottom padding in order to ensure scrollbar not showing\n    if ((wH + 12) > fcH) {\n        formButtons.css('bottom', (wH - fcH + 28) + 'px');\n    } else {\n        formButtons.css('bottom', '');\n    }\n}\n\nlocateFormButtons();\n$(window).on('resize.formbuttons', function () {\n    locateFormButtons();\n});\n\n// PASSWORD FIELDS\n$('.form-group--password').each(function () {\n    new PasswordMeter($(this));\n});\n\n// SLUG FIELDS\n$('.form-group--slug').each(function () {\n    new Slug($(this));\n});"],"sourceRoot":"/source/"}