{"version":3,"sources":["uploader.js"],"names":[],"mappingsfile":"uploader.js","sourcesContent":[";(function (window) {\n    'use strict';\n\n    // Uploader Constructor\n    function Uploader(zone, options) {\n        this.zone = zone;\n        this._init(options);\n    }\n\n    // Uploader\n    Uploader.prototype = {\n        _init: function (options) {\n            var defaults = {\n                selectButton: false,\n                uploadInput: false,\n                focusClass: 'dropzone--enter',\n                indicatorClass: 'UploadIndicator',\n                outputList: false\n            };\n\n            this.options = $.extend(defaults, options);\n            this.uploadurl = this.zone.attr('action');\n            this.maxsize = this.zone.data('maxsize');\n\n            this.fileQueue = [];\n            this.statusUploadIndicators = [];\n            this.currentFile = 0;\n            this.inProcess = false;\n\n            this._initEvents();\n        },\n        _initEvents: function () {\n            var self = this;\n\n            // Drag indication\n            this.zone.on('dragenter, dragover', function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                $(this).addClass('dropzone--focus');\n            });\n\n            this.zone.on('dragleave', function () {\n                $(this).removeClass('dropzone--focus');\n            });\n\n            // Disable window drop\n            $(window).on('drop', function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Bind file drop\n            this.zone.on('drop', function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                self._queueFiles(e.originalEvent.dataTransfer.files);\n\n                $(this).removeClass('dropzone--focus');\n            });\n\n            // Bind input change\n            if (this.options.uploadInput) {\n                $(this.options.uploadInput).on('change', function () {\n                    self._queueFiles($(this)[0].files);\n                });\n            }\n\n            // Bind optional select button if exists\n            if (this.options.selectButton) {\n                $(this.options.selectButton).on('click', function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    $(self.options.uploadInput).click();\n                });\n            }\n        },\n        _queueFiles: function (files) {\n            for (var i = 0; i < files.length; i++) {\n\n                if (files[i].size < this.maxsize) {\n                    this._pushFile(files[i]);\n                    var indicator = this._createUploadIndicator(files[i]);\n\n                    if (this.options.outputList !== false) {\n                        $(this.options.outputList).append(indicator.getHtml());\n                    }\n                }\n\n            }\n\n            if (this.inProcess === false) {\n                this._upload();\n            }\n        },\n        _pushFile: function (file) {\n            var fd = new FormData();\n            fd.append('file', file);\n\n            this.fileQueue.push(fd);\n        },\n        _createUploadIndicator: function (file) {\n            var className = window[this.options.indicatorClass];\n\n            var indicator = new className(file);\n\n            this.statusUploadIndicators.push(indicator);\n\n            return indicator;\n        },\n        _upload: function () {\n            if (this.currentFile < this.fileQueue.length) {\n                this.inProcess = true;\n\n                this._uploadNextFile();\n            } else {\n                this.inProcess = false;\n            }\n        },\n        _uploadNextFile: function () {\n            var self = this;\n            var fd = this.fileQueue[this.currentFile],\n                indicator = this.statusUploadIndicators[this.currentFile];\n\n            $.ajax({\n                xhr: function () {\n                    var xhrobj = $.ajaxSettings.xhr();\n                    if (xhrobj.upload) {\n                        xhrobj.upload.addEventListener('progress', function (e) {\n                            indicator.setProgress(ajax_loaded(e));\n                        });\n                    }\n                    return xhrobj;\n                },\n                url: self.uploadurl, type: 'POST',\n                contentType: false, processData: false,\n                cache: false, data: fd,\n                success: function (data) {\n                    indicator.complete(data);\n                }\n            })\n            .always(function () {\n                self.currentFile++;\n                self._upload();\n            });\n        }\n    };\n\n    window.Uploader = Uploader;\n\n    // UploadIndicator Constructor\n    function UploadIndicator(file) {\n        this._init(file);\n    }\n\n    // UploadIndicator\n    UploadIndicator.prototype = {\n        _init: function (file) {\n            this.container = $('<li class=\"document upload\"></li>');\n\n            this.progress = $('<div class=\"upload__progress\"></div>').appendTo(this.container);\n            this.progressBar = $('<div class=\"upload__progress-bar\"></div>').appendTo(this.progress);\n\n            this.thumbnail = $('<div class=\"document-thumbnail\"></div>').appendTo(this.container);\n\n            this.filename = $('<p class=\"document__name upload__name\">' + html_entities(file.name) + '</p>').appendTo(this.container);\n        },\n        getHtml: function () {\n            return this.container;\n        },\n        setProgress: function (percent) {\n            var size = percent.toString() + '%';\n            this.progressBar.css({height: size, width: size});\n\n            if (percent === 100) {\n                this.progress.remove();\n            }\n        },\n        complete: function (reply) {\n            this.setProgress(100);\n\n            if (reply.type === 'success') {\n                this._success(reply.upload);\n            } else if (reply.type === 'error') {\n                this._error(reply.message);\n            }\n        },\n        _success: function (upload) {\n            this.thumbnail.remove();\n\n            this.thumbnail = $(upload.thumbnail).prependTo(this.container);\n\n            this.link = $('<a class=\"upload__link\" href=\"' + upload.edit_url + '\"> </a>').appendTo(this.container);\n\n            this.filename.text(upload.name);\n        },\n        _error: function (message) {\n            this.container.addClass('upload--danger');\n            this.thumbnail.remove();\n\n            $('<div class=\"upload__error\"><div class=\"upload__error-message\">' + message + '</div></div>').appendTo(this.container);\n        }\n    };\n\n    window.UploadIndicator = UploadIndicator;\n\n})(window);"],"sourceRoot":"/source/"}