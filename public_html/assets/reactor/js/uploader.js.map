{"version":3,"sources":["uploader.js"],"names":[],"mappingsfile":"uploader.js","sourcesContent":[";(function (window) {\r\n    'use strict';\r\n\r\n    // Uploader Constructor\r\n    function Uploader(zone, options) {\r\n        this.zone = zone;\r\n        this._init(options);\r\n    }\r\n\r\n    // Uploader\r\n    Uploader.prototype = {\r\n        _init: function (options) {\r\n            var defaults = {\r\n                selectButton: false,\r\n                uploadInput: false,\r\n                focusClass: 'dropzone--enter',\r\n                indicatorClass: 'UploadIndicator',\r\n                outputList: false,\r\n                outputAppend: true,\r\n                isDropzoneForm: true\r\n            };\r\n\r\n            this.options = $.extend(defaults, options);\r\n            this.uploadurl = this.options.isDropzoneForm ? this.zone.attr('action') : this.zone.data('action');\r\n            this.maxsize = this.zone.data('maxsize');\r\n\r\n            this.fileQueue = [];\r\n            this.statusUploadIndicators = [];\r\n            this.currentFile = 0;\r\n            this.inProcess = false;\r\n\r\n            this.controller = null;\r\n\r\n            this._initEvents();\r\n        },\r\n        _initEvents: function () {\r\n            var self = this;\r\n\r\n            // Drag indication\r\n            this.zone.on('dragenter, dragover', function (e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                $(this).addClass('dropzone--focus');\r\n            });\r\n\r\n            this.zone.on('dragleave', function () {\r\n                $(this).removeClass('dropzone--focus');\r\n            });\r\n\r\n            // Disable window drop\r\n            $(window).on('drop', function (e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            });\r\n\r\n            // Bind file drop\r\n            this.zone.on('drop', function (e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                self._queueFiles(e.originalEvent.dataTransfer.files);\r\n\r\n                $(this).removeClass('dropzone--focus');\r\n            });\r\n\r\n            // Bind input change\r\n            if (this.options.uploadInput) {\r\n                $(this.options.uploadInput).on('change', function () {\r\n                    self._queueFiles($(this)[0].files);\r\n                });\r\n            }\r\n\r\n            // Bind optional select button if exists\r\n            if (this.options.selectButton) {\r\n                $(this.options.selectButton).on('click', function (e) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n\r\n                    $(self.options.uploadInput).click();\r\n                });\r\n            }\r\n        },\r\n        _queueFiles: function (files) {\r\n            for (var i = 0; i < files.length; i++) {\r\n\r\n                if (files[i].size < this.maxsize) {\r\n                    this._pushFile(files[i]);\r\n                    var indicator = this._createUploadIndicator(files[i]);\r\n\r\n                    if (this.options.outputList !== false) {\r\n                        var indicator = indicator.getHtml(),\r\n                            list = $(this.options.outputList);\r\n\r\n                        if (this.options.outputAppend) {\r\n                            list.append(indicator);\r\n                        } else {\r\n                            list.prepend(indicator);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            if (this.inProcess === false) {\r\n                this._upload();\r\n            }\r\n        },\r\n        _pushFile: function (file) {\r\n            var fd = new FormData();\r\n            fd.append('file', file);\r\n\r\n            this.fileQueue.push(fd);\r\n        },\r\n        _createUploadIndicator: function (file) {\r\n            var className = window[this.options.indicatorClass];\r\n\r\n            var indicator = new className(file, this);\r\n\r\n            this.statusUploadIndicators.push(indicator);\r\n\r\n            return indicator;\r\n        },\r\n        _upload: function () {\r\n            if (this.currentFile < this.fileQueue.length) {\r\n                this.inProcess = true;\r\n\r\n                this._uploadNextFile();\r\n            } else {\r\n                this.inProcess = false;\r\n            }\r\n        },\r\n        _uploadNextFile: function () {\r\n            var self = this;\r\n            var fd = this.fileQueue[this.currentFile],\r\n                indicator = this.statusUploadIndicators[this.currentFile];\r\n\r\n            $.ajax({\r\n                xhr: function () {\r\n                    var xhrobj = $.ajaxSettings.xhr();\r\n                    if (xhrobj.upload) {\r\n                        xhrobj.upload.addEventListener('progress', function (e) {\r\n                            indicator.setProgress(ajax_loaded(e));\r\n                        });\r\n                    }\r\n                    return xhrobj;\r\n                },\r\n                url: self.uploadurl, type: 'POST',\r\n                contentType: false, processData: false,\r\n                cache: false, data: fd,\r\n                success: function (data) {\r\n                    indicator.complete(data);\r\n                }\r\n            })\r\n                .always(function () {\r\n                    self.currentFile++;\r\n                    self._upload();\r\n                });\r\n        }\r\n    };\r\n\r\n    window.Uploader = Uploader;\r\n\r\n    // UploadIndicator Constructor\r\n    function UploadIndicator(file, uploader) {\r\n        this.uploader = uploader;\r\n\r\n        this._init(file);\r\n    }\r\n\r\n    // UploadIndicator\r\n    UploadIndicator.prototype = {\r\n        _init: function (file) {\r\n            this.container = $('<li class=\"document upload\"></li>');\r\n\r\n            this.progress = $('<div class=\"upload__progress\"></div>').appendTo(this.container);\r\n            this.progressBar = $('<div class=\"upload__progress-bar\"></div>').appendTo(this.progress);\r\n\r\n            this.thumbnail = $('<div class=\"document-thumbnail\"></div>').appendTo(this.container);\r\n\r\n            this.filename = $('<p class=\"document__name upload__name\">' + html_entities(file.name) + '</p>').appendTo(this.container);\r\n        },\r\n        getHtml: function () {\r\n            return this.container;\r\n        },\r\n        setProgress: function (percent) {\r\n            var size = percent.toString() + '%';\r\n            this.progressBar.height(size).width(size);\r\n\r\n            if (percent === 100) {\r\n                this.progress.remove();\r\n            }\r\n        },\r\n        complete: function (reply) {\r\n            this.setProgress(100);\r\n\r\n            if (reply.type === 'success') {\r\n                this._success(reply.upload);\r\n            } else if (reply.type === 'error') {\r\n                this._error(reply.message);\r\n            }\r\n        },\r\n        _success: function (upload) {\r\n            this.thumbnail.remove();\r\n\r\n            this.thumbnail = $(upload.thumbnail).prependTo(this.container);\r\n\r\n            this.link = $('<a class=\"upload__link\" href=\"' + upload.edit_url + '\"> </a>').appendTo(this.container);\r\n\r\n            this.filename.text(upload.name);\r\n        },\r\n        _error: function (message) {\r\n            this.container.addClass('upload--danger');\r\n            this.thumbnail.remove();\r\n\r\n            $('<div class=\"upload__error\"><div class=\"upload__error-message\">' + message + '</div></div>').appendTo(this.container);\r\n        }\r\n    };\r\n\r\n    window.UploadIndicator = UploadIndicator;\r\n\r\n})(window);"],"sourceRoot":"/source/"}